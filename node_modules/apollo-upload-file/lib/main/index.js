"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ReactNativeFile", {
  enumerable: true,
  get: function get() {
    return _extractFiles.ReactNativeFile;
  }
});
exports.createUploadLink = void 0;

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.regexp.split");

var _apolloLink = require("apollo-link");

var _apolloLinkHttpCommon = require("apollo-link-http-common");

var _extractFiles = _interopRequireWildcard(require("extract-files"));

var createUploadLink = function createUploadLink() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$uri = _ref.uri,
      fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,
      _ref$fetch = _ref.fetch,
      linkFetch = _ref$fetch === void 0 ? fetch : _ref$fetch,
      fetchOptions = _ref.fetchOptions,
      credentials = _ref.credentials,
      headers = _ref.headers,
      includeExtensions = _ref.includeExtensions;

  var linkConfig = {
    http: {
      includeExtensions: includeExtensions
    },
    options: fetchOptions,
    credentials: credentials,
    headers: headers
  };
  return new _apolloLink.ApolloLink(function (operation) {
    var uri = (0, _apolloLinkHttpCommon.selectURI)(operation, fetchUri);
    var context = operation.getContext();
    var contextConfig = {
      http: context.http,
      options: context.fetchOptions,
      credentials: context.credentials,
      headers: context.headers
    };

    var _selectHttpOptionsAnd = (0, _apolloLinkHttpCommon.selectHttpOptionsAndBody)(operation, _apolloLinkHttpCommon.fallbackHttpConfig, linkConfig, contextConfig),
        options = _selectHttpOptionsAnd.options,
        body = _selectHttpOptionsAnd.body;

    var files = (0, _extractFiles.default)(body);
    var payload = (0, _apolloLinkHttpCommon.serializeFetchParameter)(body, 'Payload');

    if (files.length) {
      delete options.headers['content-type'];
      options.body = new FormData();
      var operationFetchedData = JSON.parse(payload);
      var variables = operationFetchedData.variables;
      var operationName = operationFetchedData.operationName;
      var query = operationFetchedData.query;
      files.forEach(function (_ref3) {
        var file = _ref3.file;

        if (_ref3.index) {
          var index = '_' + index;
        } else {
          var index = '';
        }

        var name = _ref3.path.split('variables.')[1];

        if (name in variables) {
          delete variables[name];
        }

        return options.body.append(name + index, file);
      });
      options.body.append('query', query);
      options.body.append('operationName', operationName);
      options.body.append('variables', JSON.stringify(variables));
    } else options.body = payload;

    return new _apolloLink.Observable(function (observer) {
      var _createSignalIfSuppor = (0, _apolloLinkHttpCommon.createSignalIfSupported)(),
          controller = _createSignalIfSuppor.controller,
          signal = _createSignalIfSuppor.signal;

      if (controller) options.signal = signal;
      linkFetch(uri, options).then(function (response) {
        operation.setContext({
          response: response
        });
        return response;
      }).then((0, _apolloLinkHttpCommon.parseAndCheckHttpResponse)(operation)).then(function (result) {
        observer.next(result);
        observer.complete();
      }).catch(function (error) {
        if (error.name === 'AbortError') return;
        if (error.result && error.result.errors && error.result.data) observer.next(error.result);
        observer.error(error);
      });
      return function () {
        if (controller) controller.abort();
      };
    });
  });
};

exports.createUploadLink = createUploadLink;
