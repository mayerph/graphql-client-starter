import { ApolloLink, Observable } from 'apollo-link'
import {
  selectURI,
  selectHttpOptionsAndBody,
  fallbackHttpConfig,
  serializeFetchParameter,
  createSignalIfSupported,
  parseAndCheckHttpResponse
} from 'apollo-link-http-common'
import extractFiles from 'extract-files'

export { ReactNativeFile } from 'extract-files'

export const createUploadLink = ({
  uri: fetchUri = '/graphql',
  fetch: linkFetch = fetch,
  fetchOptions,
  credentials,
  headers,
  includeExtensions
} = {}) => {
  const linkConfig = {
    http: { includeExtensions },
    options: fetchOptions,
    credentials,
    headers
  }

  return new ApolloLink(operation => {
    const uri = selectURI(operation, fetchUri)
    const context = operation.getContext()
    const contextConfig = {
      http: context.http,
      options: context.fetchOptions,
      credentials: context.credentials,
      headers: context.headers
    }

    const { options, body } = selectHttpOptionsAndBody(
      operation,
      fallbackHttpConfig,
      linkConfig,
      contextConfig
    )
    const files = extractFiles(body);
    const payload = serializeFetchParameter(body, 'Payload')

    if (files.length) {
      delete options.headers['content-type']
      options.body = new FormData()
      const operationFetchedData = JSON.parse(payload)
      const variables = operationFetchedData.variables
      const operationName = operationFetchedData.operationName
      const query = operationFetchedData.query;

      files.forEach(function(_ref3) {
        var file = _ref3.file;
        if(_ref3.index){
          var index = '_'+index;
        }
        else {
          var index='';
        }
        var name = _ref3.path.split('variables.')[1];
        if (name in variables){
          delete variables[name];
        }
        return options.body.append(name+index, file)
      })
      options.body.append('query', query)
      options.body.append('operationName', operationName)
      options.body.append('variables', JSON.stringify(variables))
      } else options.body = payload

    return new Observable(observer => {
      // Allow aborting fetch, if supported.
      const { controller, signal } = createSignalIfSupported()
      if (controller) options.signal = signal

      linkFetch(uri, options)
        .then(response => {
          // Forward the response on the context.
          operation.setContext({ response })
          return response
        })
        .then(parseAndCheckHttpResponse(operation))
        .then(result => {
          observer.next(result)
          observer.complete()
        })
        .catch(error => {
          if (error.name === 'AbortError')
            // Fetch was aborted.
            return

          if (error.result && error.result.errors && error.result.data)
            // There is a GraphQL result to forward.
            observer.next(error.result)

          observer.error(error)
        })

        // Cleanup function.
        return () => {
          // Abort fetch.
          if (controller) controller.abort()
        }
      })
    })
  }
