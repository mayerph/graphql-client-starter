/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApolloLink, Observable as LinkObservable, } from 'apollo-link';
import { print } from 'graphql/language/printer';
import { fetch, mergeHeaders, prioritize, } from 'apollo-angular-link-http-common';
// XXX find a better name for it
var 
// XXX find a better name for it
HttpLinkHandler = /** @class */ (function (_super) {
    tslib_1.__extends(HttpLinkHandler, _super);
    function HttpLinkHandler(httpClient, options) {
        var _this = _super.call(this) || this;
        _this.httpClient = httpClient;
        _this.options = options;
        _this.requester = function (operation) {
            return new LinkObservable(function (observer) {
                /** @type {?} */
                var context = operation.getContext();
                // decides which value to pick, Context, Options or to just use the default
                /** @type {?} */
                var pick = function (key, init) {
                    return prioritize(context[key], _this.options[key], init);
                };
                /** @type {?} */
                var includeQuery = pick('includeQuery', true);
                /** @type {?} */
                var includeExtensions = pick('includeExtensions', false);
                /** @type {?} */
                var method = pick('method', 'POST');
                /** @type {?} */
                var url = pick('uri', 'graphql');
                /** @type {?} */
                var withCredentials = pick('withCredentials');
                /** @type {?} */
                var req = {
                    method: method,
                    url: url,
                    body: {
                        operationName: operation.operationName,
                        variables: operation.variables,
                    },
                    options: {
                        withCredentials: withCredentials,
                        headers: _this.options.headers,
                    },
                };
                if (includeExtensions) {
                    ((/** @type {?} */ (req.body))).extensions = operation.extensions;
                }
                if (includeQuery) {
                    ((/** @type {?} */ (req.body))).query = print(operation.query);
                }
                if (context.headers) {
                    req.options.headers = mergeHeaders(req.options.headers, context.headers);
                }
                /** @type {?} */
                var sub = fetch(req, _this.httpClient).subscribe({
                    next: function (response) {
                        operation.setContext({ response: response });
                        observer.next(response.body);
                    },
                    error: function (err) { return observer.error(err); },
                    complete: function () { return observer.complete(); },
                });
                return function () {
                    if (!sub.closed) {
                        sub.unsubscribe();
                    }
                };
            });
        };
        return _this;
    }
    /**
     * @param {?} op
     * @return {?}
     */
    HttpLinkHandler.prototype.request = /**
     * @param {?} op
     * @return {?}
     */
    function (op) {
        return this.requester(op);
    };
    return HttpLinkHandler;
}(ApolloLink));
// XXX find a better name for it
export { HttpLinkHandler };
if (false) {
    /** @type {?} */
    HttpLinkHandler.prototype.requester;
    /** @type {?} */
    HttpLinkHandler.prototype.httpClient;
    /** @type {?} */
    HttpLinkHandler.prototype.options;
}
var HttpLink = /** @class */ (function () {
    function HttpLink(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    HttpLink.prototype.create = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new HttpLinkHandler(this.httpClient, options);
    };
    HttpLink.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpLink.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return HttpLink;
}());
export { HttpLink };
if (false) {
    /** @type {?} */
    HttpLink.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHR0cExpbmsuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1saW5rLWh0dHAvIiwic291cmNlcyI6WyJIdHRwTGluay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFDTCxVQUFVLEVBQ1YsVUFBVSxJQUFJLGNBQWMsR0FJN0IsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQy9DLE9BQU8sRUFDTCxLQUFLLEVBS0wsWUFBWSxFQUNaLFVBQVUsR0FDWCxNQUFNLGlDQUFpQyxDQUFDOztBQUd6Qzs7O0lBQXFDLDJDQUFVO0lBRzdDLHlCQUFvQixVQUFzQixFQUFVLE9BQWdCO1FBQXBFLFlBQ0UsaUJBQU8sU0ErRFI7UUFoRW1CLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsYUFBTyxHQUFQLE9BQU8sQ0FBUztRQUdsRSxLQUFJLENBQUMsU0FBUyxHQUFHLFVBQUMsU0FBb0I7WUFDcEMsT0FBQSxJQUFJLGNBQWMsQ0FBQyxVQUFDLFFBQWE7O29CQUN6QixPQUFPLEdBQVksU0FBUyxDQUFDLFVBQVUsRUFBRTs7O29CQUd6QyxJQUFJLEdBQUcsVUFDWCxHQUFNLEVBQ04sSUFBOEI7b0JBRTlCLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUMzRCxDQUFDOztvQkFFSyxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUM7O29CQUN6QyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDOztvQkFDcEQsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDOztvQkFDL0IsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDOztvQkFDNUIsZUFBZSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQzs7b0JBRXpDLEdBQUcsR0FBWTtvQkFDbkIsTUFBTSxRQUFBO29CQUNOLEdBQUcsS0FBQTtvQkFDSCxJQUFJLEVBQUU7d0JBQ0osYUFBYSxFQUFFLFNBQVMsQ0FBQyxhQUFhO3dCQUN0QyxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVM7cUJBQy9CO29CQUNELE9BQU8sRUFBRTt3QkFDUCxlQUFlLGlCQUFBO3dCQUNmLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87cUJBQzlCO2lCQUNGO2dCQUVELElBQUksaUJBQWlCLEVBQUU7b0JBQ3JCLENBQUMsbUJBQUEsR0FBRyxDQUFDLElBQUksRUFBUSxDQUFDLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUM7aUJBQ3REO2dCQUVELElBQUksWUFBWSxFQUFFO29CQUNoQixDQUFDLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQVEsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuRDtnQkFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7b0JBQ25CLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FDaEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQ25CLE9BQU8sQ0FBQyxPQUFPLENBQ2hCLENBQUM7aUJBQ0g7O29CQUVLLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUM7b0JBQ2hELElBQUksRUFBRSxVQUFBLFFBQVE7d0JBQ1osU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFDLFFBQVEsVUFBQSxFQUFDLENBQUMsQ0FBQzt3QkFDakMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQy9CLENBQUM7b0JBQ0QsS0FBSyxFQUFFLFVBQUEsR0FBRyxJQUFJLE9BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBbkIsQ0FBbUI7b0JBQ2pDLFFBQVEsRUFBRSxjQUFNLE9BQUEsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFuQixDQUFtQjtpQkFDcEMsQ0FBQztnQkFFRixPQUFPO29CQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO3dCQUNmLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztxQkFDbkI7Z0JBQ0gsQ0FBQyxDQUFDO1lBQ0osQ0FBQyxDQUFDO1FBM0RGLENBMkRFLENBQUM7O0lBQ1AsQ0FBQzs7Ozs7SUFFTSxpQ0FBTzs7OztJQUFkLFVBQWUsRUFBYTtRQUMxQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXhFRCxDQUFxQyxVQUFVLEdBd0U5Qzs7Ozs7SUF2RUMsb0NBQWlDOztJQUVyQixxQ0FBOEI7O0lBQUUsa0NBQXdCOztBQXVFdEU7SUFFRSxrQkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7Ozs7O0lBRXZDLHlCQUFNOzs7O0lBQWIsVUFBYyxPQUFnQjtRQUM1QixPQUFPLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Z0JBTkYsVUFBVTs7OztnQkE5RkgsVUFBVTs7SUFxR2xCLGVBQUM7Q0FBQSxBQVBELElBT0M7U0FOWSxRQUFROzs7SUFDUCw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge1xuICBBcG9sbG9MaW5rLFxuICBPYnNlcnZhYmxlIGFzIExpbmtPYnNlcnZhYmxlLFxuICBPcGVyYXRpb24sXG4gIFJlcXVlc3RIYW5kbGVyLFxuICBGZXRjaFJlc3VsdCxcbn0gZnJvbSAnYXBvbGxvLWxpbmsnO1xuaW1wb3J0IHtwcmludH0gZnJvbSAnZ3JhcGhxbC9sYW5ndWFnZS9wcmludGVyJztcbmltcG9ydCB7XG4gIGZldGNoLFxuICBPcHRpb25zLFxuICBCb2R5LFxuICBSZXF1ZXN0LFxuICBDb250ZXh0LFxuICBtZXJnZUhlYWRlcnMsXG4gIHByaW9yaXRpemUsXG59IGZyb20gJ2Fwb2xsby1hbmd1bGFyLWxpbmstaHR0cC1jb21tb24nO1xuXG4vLyBYWFggZmluZCBhIGJldHRlciBuYW1lIGZvciBpdFxuZXhwb3J0IGNsYXNzIEh0dHBMaW5rSGFuZGxlciBleHRlbmRzIEFwb2xsb0xpbmsge1xuICBwdWJsaWMgcmVxdWVzdGVyOiBSZXF1ZXN0SGFuZGxlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIHByaXZhdGUgb3B0aW9uczogT3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnJlcXVlc3RlciA9IChvcGVyYXRpb246IE9wZXJhdGlvbikgPT5cbiAgICAgIG5ldyBMaW5rT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjb250ZXh0OiBDb250ZXh0ID0gb3BlcmF0aW9uLmdldENvbnRleHQoKTtcblxuICAgICAgICAvLyBkZWNpZGVzIHdoaWNoIHZhbHVlIHRvIHBpY2ssIENvbnRleHQsIE9wdGlvbnMgb3IgdG8ganVzdCB1c2UgdGhlIGRlZmF1bHRcbiAgICAgICAgY29uc3QgcGljayA9IDxLIGV4dGVuZHMga2V5b2YgQ29udGV4dCB8IGtleW9mIE9wdGlvbnM+KFxuICAgICAgICAgIGtleTogSyxcbiAgICAgICAgICBpbml0PzogQ29udGV4dFtLXSB8IE9wdGlvbnNbS10sXG4gICAgICAgICk6IENvbnRleHRbS10gfCBPcHRpb25zW0tdID0+IHtcbiAgICAgICAgICByZXR1cm4gcHJpb3JpdGl6ZShjb250ZXh0W2tleV0sIHRoaXMub3B0aW9uc1trZXldLCBpbml0KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBpbmNsdWRlUXVlcnkgPSBwaWNrKCdpbmNsdWRlUXVlcnknLCB0cnVlKTtcbiAgICAgICAgY29uc3QgaW5jbHVkZUV4dGVuc2lvbnMgPSBwaWNrKCdpbmNsdWRlRXh0ZW5zaW9ucycsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gcGljaygnbWV0aG9kJywgJ1BPU1QnKTtcbiAgICAgICAgY29uc3QgdXJsID0gcGljaygndXJpJywgJ2dyYXBocWwnKTtcbiAgICAgICAgY29uc3Qgd2l0aENyZWRlbnRpYWxzID0gcGljaygnd2l0aENyZWRlbnRpYWxzJyk7XG5cbiAgICAgICAgY29uc3QgcmVxOiBSZXF1ZXN0ID0ge1xuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZTogb3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IG9wZXJhdGlvbi52YXJpYWJsZXMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpbmNsdWRlRXh0ZW5zaW9ucykge1xuICAgICAgICAgIChyZXEuYm9keSBhcyBCb2R5KS5leHRlbnNpb25zID0gb3BlcmF0aW9uLmV4dGVuc2lvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5jbHVkZVF1ZXJ5KSB7XG4gICAgICAgICAgKHJlcS5ib2R5IGFzIEJvZHkpLnF1ZXJ5ID0gcHJpbnQob3BlcmF0aW9uLnF1ZXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0LmhlYWRlcnMpIHtcbiAgICAgICAgICByZXEub3B0aW9ucy5oZWFkZXJzID0gbWVyZ2VIZWFkZXJzKFxuICAgICAgICAgICAgcmVxLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgIGNvbnRleHQuaGVhZGVycyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3ViID0gZmV0Y2gocmVxLCB0aGlzLmh0dHBDbGllbnQpLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgb3BlcmF0aW9uLnNldENvbnRleHQoe3Jlc3BvbnNlfSk7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGVyciA9PiBvYnNlcnZlci5lcnJvcihlcnIpLFxuICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiBvYnNlcnZlci5jb21wbGV0ZSgpLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGlmICghc3ViLmNsb3NlZCkge1xuICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVxdWVzdChvcDogT3BlcmF0aW9uKTogTGlua09ic2VydmFibGU8RmV0Y2hSZXN1bHQ+IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdGVyKG9wKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSHR0cExpbmsge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XG5cbiAgcHVibGljIGNyZWF0ZShvcHRpb25zOiBPcHRpb25zKTogSHR0cExpbmtIYW5kbGVyIHtcbiAgICByZXR1cm4gbmV3IEh0dHBMaW5rSGFuZGxlcih0aGlzLmh0dHBDbGllbnQsIG9wdGlvbnMpO1xuICB9XG59XG4iXX0=