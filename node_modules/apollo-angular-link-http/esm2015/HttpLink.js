/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApolloLink, Observable as LinkObservable, } from 'apollo-link';
import { print } from 'graphql/language/printer';
import { fetch, mergeHeaders, prioritize, } from 'apollo-angular-link-http-common';
// XXX find a better name for it
export class HttpLinkHandler extends ApolloLink {
    /**
     * @param {?} httpClient
     * @param {?} options
     */
    constructor(httpClient, options) {
        super();
        this.httpClient = httpClient;
        this.options = options;
        this.requester = (operation) => new LinkObservable((observer) => {
            /** @type {?} */
            const context = operation.getContext();
            // decides which value to pick, Context, Options or to just use the default
            /** @type {?} */
            const pick = (key, init) => {
                return prioritize(context[key], this.options[key], init);
            };
            /** @type {?} */
            const includeQuery = pick('includeQuery', true);
            /** @type {?} */
            const includeExtensions = pick('includeExtensions', false);
            /** @type {?} */
            const method = pick('method', 'POST');
            /** @type {?} */
            const url = pick('uri', 'graphql');
            /** @type {?} */
            const withCredentials = pick('withCredentials');
            /** @type {?} */
            const req = {
                method,
                url,
                body: {
                    operationName: operation.operationName,
                    variables: operation.variables,
                },
                options: {
                    withCredentials,
                    headers: this.options.headers,
                },
            };
            if (includeExtensions) {
                ((/** @type {?} */ (req.body))).extensions = operation.extensions;
            }
            if (includeQuery) {
                ((/** @type {?} */ (req.body))).query = print(operation.query);
            }
            if (context.headers) {
                req.options.headers = mergeHeaders(req.options.headers, context.headers);
            }
            /** @type {?} */
            const sub = fetch(req, this.httpClient).subscribe({
                next: response => {
                    operation.setContext({ response });
                    observer.next(response.body);
                },
                error: err => observer.error(err),
                complete: () => observer.complete(),
            });
            return () => {
                if (!sub.closed) {
                    sub.unsubscribe();
                }
            };
        });
    }
    /**
     * @param {?} op
     * @return {?}
     */
    request(op) {
        return this.requester(op);
    }
}
if (false) {
    /** @type {?} */
    HttpLinkHandler.prototype.requester;
    /** @type {?} */
    HttpLinkHandler.prototype.httpClient;
    /** @type {?} */
    HttpLinkHandler.prototype.options;
}
export class HttpLink {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    create(options) {
        return new HttpLinkHandler(this.httpClient, options);
    }
}
HttpLink.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpLink.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    HttpLink.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHR0cExpbmsuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1saW5rLWh0dHAvIiwic291cmNlcyI6WyJIdHRwTGluay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUNMLFVBQVUsRUFDVixVQUFVLElBQUksY0FBYyxHQUk3QixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDL0MsT0FBTyxFQUNMLEtBQUssRUFLTCxZQUFZLEVBQ1osVUFBVSxHQUNYLE1BQU0saUNBQWlDLENBQUM7O0FBR3pDLE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7Ozs7O0lBRzdDLFlBQW9CLFVBQXNCLEVBQVUsT0FBZ0I7UUFDbEUsS0FBSyxFQUFFLENBQUM7UUFEVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUdsRSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsU0FBb0IsRUFBRSxFQUFFLENBQ3hDLElBQUksY0FBYyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUU7O2tCQUM3QixPQUFPLEdBQVksU0FBUyxDQUFDLFVBQVUsRUFBRTs7O2tCQUd6QyxJQUFJLEdBQUcsQ0FDWCxHQUFNLEVBQ04sSUFBOEIsRUFDTCxFQUFFO2dCQUMzQixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMzRCxDQUFDOztrQkFFSyxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUM7O2tCQUN6QyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDOztrQkFDcEQsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDOztrQkFDL0IsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDOztrQkFDNUIsZUFBZSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQzs7a0JBRXpDLEdBQUcsR0FBWTtnQkFDbkIsTUFBTTtnQkFDTixHQUFHO2dCQUNILElBQUksRUFBRTtvQkFDSixhQUFhLEVBQUUsU0FBUyxDQUFDLGFBQWE7b0JBQ3RDLFNBQVMsRUFBRSxTQUFTLENBQUMsU0FBUztpQkFDL0I7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLGVBQWU7b0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTztpQkFDOUI7YUFDRjtZQUVELElBQUksaUJBQWlCLEVBQUU7Z0JBQ3JCLENBQUMsbUJBQUEsR0FBRyxDQUFDLElBQUksRUFBUSxDQUFDLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUM7YUFDdEQ7WUFFRCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsQ0FBQyxtQkFBQSxHQUFHLENBQUMsSUFBSSxFQUFRLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNuRDtZQUVELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDbkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUNoQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFDbkIsT0FBTyxDQUFDLE9BQU8sQ0FDaEIsQ0FBQzthQUNIOztrQkFFSyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDO2dCQUNoRCxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQUU7b0JBQ2YsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7b0JBQ2pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMvQixDQUFDO2dCQUNELEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO2dCQUNqQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTthQUNwQyxDQUFDO1lBRUYsT0FBTyxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7b0JBQ2YsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUNuQjtZQUNILENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFTSxPQUFPLENBQUMsRUFBYTtRQUMxQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUIsQ0FBQztDQUNGOzs7SUF2RUMsb0NBQWlDOztJQUVyQixxQ0FBOEI7O0lBQUUsa0NBQXdCOztBQXdFdEUsTUFBTSxPQUFPLFFBQVE7Ozs7SUFDbkIsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7Ozs7O0lBRXZDLE1BQU0sQ0FBQyxPQUFnQjtRQUM1QixPQUFPLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7O1lBTkYsVUFBVTs7OztZQTlGSCxVQUFVOzs7O0lBZ0dKLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7XG4gIEFwb2xsb0xpbmssXG4gIE9ic2VydmFibGUgYXMgTGlua09ic2VydmFibGUsXG4gIE9wZXJhdGlvbixcbiAgUmVxdWVzdEhhbmRsZXIsXG4gIEZldGNoUmVzdWx0LFxufSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQge3ByaW50fSBmcm9tICdncmFwaHFsL2xhbmd1YWdlL3ByaW50ZXInO1xuaW1wb3J0IHtcbiAgZmV0Y2gsXG4gIE9wdGlvbnMsXG4gIEJvZHksXG4gIFJlcXVlc3QsXG4gIENvbnRleHQsXG4gIG1lcmdlSGVhZGVycyxcbiAgcHJpb3JpdGl6ZSxcbn0gZnJvbSAnYXBvbGxvLWFuZ3VsYXItbGluay1odHRwLWNvbW1vbic7XG5cbi8vIFhYWCBmaW5kIGEgYmV0dGVyIG5hbWUgZm9yIGl0XG5leHBvcnQgY2xhc3MgSHR0cExpbmtIYW5kbGVyIGV4dGVuZHMgQXBvbGxvTGluayB7XG4gIHB1YmxpYyByZXF1ZXN0ZXI6IFJlcXVlc3RIYW5kbGVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCwgcHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMucmVxdWVzdGVyID0gKG9wZXJhdGlvbjogT3BlcmF0aW9uKSA9PlxuICAgICAgbmV3IExpbmtPYnNlcnZhYmxlKChvYnNlcnZlcjogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQ6IENvbnRleHQgPSBvcGVyYXRpb24uZ2V0Q29udGV4dCgpO1xuXG4gICAgICAgIC8vIGRlY2lkZXMgd2hpY2ggdmFsdWUgdG8gcGljaywgQ29udGV4dCwgT3B0aW9ucyBvciB0byBqdXN0IHVzZSB0aGUgZGVmYXVsdFxuICAgICAgICBjb25zdCBwaWNrID0gPEsgZXh0ZW5kcyBrZXlvZiBDb250ZXh0IHwga2V5b2YgT3B0aW9ucz4oXG4gICAgICAgICAga2V5OiBLLFxuICAgICAgICAgIGluaXQ/OiBDb250ZXh0W0tdIHwgT3B0aW9uc1tLXSxcbiAgICAgICAgKTogQ29udGV4dFtLXSB8IE9wdGlvbnNbS10gPT4ge1xuICAgICAgICAgIHJldHVybiBwcmlvcml0aXplKGNvbnRleHRba2V5XSwgdGhpcy5vcHRpb25zW2tleV0sIGluaXQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGluY2x1ZGVRdWVyeSA9IHBpY2soJ2luY2x1ZGVRdWVyeScsIHRydWUpO1xuICAgICAgICBjb25zdCBpbmNsdWRlRXh0ZW5zaW9ucyA9IHBpY2soJ2luY2x1ZGVFeHRlbnNpb25zJywgZmFsc2UpO1xuICAgICAgICBjb25zdCBtZXRob2QgPSBwaWNrKCdtZXRob2QnLCAnUE9TVCcpO1xuICAgICAgICBjb25zdCB1cmwgPSBwaWNrKCd1cmknLCAnZ3JhcGhxbCcpO1xuICAgICAgICBjb25zdCB3aXRoQ3JlZGVudGlhbHMgPSBwaWNrKCd3aXRoQ3JlZGVudGlhbHMnKTtcblxuICAgICAgICBjb25zdCByZXE6IFJlcXVlc3QgPSB7XG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIHVybCxcbiAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lOiBvcGVyYXRpb24ub3BlcmF0aW9uTmFtZSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogb3BlcmF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHdpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMub3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGluY2x1ZGVFeHRlbnNpb25zKSB7XG4gICAgICAgICAgKHJlcS5ib2R5IGFzIEJvZHkpLmV4dGVuc2lvbnMgPSBvcGVyYXRpb24uZXh0ZW5zaW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmNsdWRlUXVlcnkpIHtcbiAgICAgICAgICAocmVxLmJvZHkgYXMgQm9keSkucXVlcnkgPSBwcmludChvcGVyYXRpb24ucXVlcnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQuaGVhZGVycykge1xuICAgICAgICAgIHJlcS5vcHRpb25zLmhlYWRlcnMgPSBtZXJnZUhlYWRlcnMoXG4gICAgICAgICAgICByZXEub3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgY29udGV4dC5oZWFkZXJzLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdWIgPSBmZXRjaChyZXEsIHRoaXMuaHR0cENsaWVudCkuc3Vic2NyaWJlKHtcbiAgICAgICAgICBuZXh0OiByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBvcGVyYXRpb24uc2V0Q29udGV4dCh7cmVzcG9uc2V9KTtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQocmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZXJyID0+IG9ic2VydmVyLmVycm9yKGVyciksXG4gICAgICAgICAgY29tcGxldGU6ICgpID0+IG9ic2VydmVyLmNvbXBsZXRlKCksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzdWIuY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyByZXF1ZXN0KG9wOiBPcGVyYXRpb24pOiBMaW5rT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdD4gfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0ZXIob3ApO1xuICB9XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwTGluayB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cblxuICBwdWJsaWMgY3JlYXRlKG9wdGlvbnM6IE9wdGlvbnMpOiBIdHRwTGlua0hhbmRsZXIge1xuICAgIHJldHVybiBuZXcgSHR0cExpbmtIYW5kbGVyKHRoaXMuaHR0cENsaWVudCwgb3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==