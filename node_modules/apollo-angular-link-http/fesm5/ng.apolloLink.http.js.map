{"version":3,"file":"ng.apolloLink.http.js.map","sources":["ng://apollo-angular-link-http/HttpLink.ts","ng://apollo-angular-link-http/HttpLinkModule.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  ApolloLink,\n  Observable as LinkObservable,\n  Operation,\n  RequestHandler,\n  FetchResult,\n} from 'apollo-link';\nimport {print} from 'graphql/language/printer';\nimport {\n  fetch,\n  Options,\n  Body,\n  Request,\n  Context,\n  mergeHeaders,\n  prioritize,\n} from 'apollo-angular-link-http-common';\n\n// XXX find a better name for it\nexport class HttpLinkHandler extends ApolloLink {\n  public requester: RequestHandler;\n\n  constructor(private httpClient: HttpClient, private options: Options) {\n    super();\n\n    this.requester = (operation: Operation) =>\n      new LinkObservable((observer: any) => {\n        const context: Context = operation.getContext();\n\n        // decides which value to pick, Context, Options or to just use the default\n        const pick = <K extends keyof Context | keyof Options>(\n          key: K,\n          init?: Context[K] | Options[K],\n        ): Context[K] | Options[K] => {\n          return prioritize(context[key], this.options[key], init);\n        };\n\n        const includeQuery = pick('includeQuery', true);\n        const includeExtensions = pick('includeExtensions', false);\n        const method = pick('method', 'POST');\n        const url = pick('uri', 'graphql');\n        const withCredentials = pick('withCredentials');\n\n        const req: Request = {\n          method,\n          url,\n          body: {\n            operationName: operation.operationName,\n            variables: operation.variables,\n          },\n          options: {\n            withCredentials,\n            headers: this.options.headers,\n          },\n        };\n\n        if (includeExtensions) {\n          (req.body as Body).extensions = operation.extensions;\n        }\n\n        if (includeQuery) {\n          (req.body as Body).query = print(operation.query);\n        }\n\n        if (context.headers) {\n          req.options.headers = mergeHeaders(\n            req.options.headers,\n            context.headers,\n          );\n        }\n\n        const sub = fetch(req, this.httpClient).subscribe({\n          next: response => {\n            operation.setContext({response});\n            observer.next(response.body);\n          },\n          error: err => observer.error(err),\n          complete: () => observer.complete(),\n        });\n\n        return () => {\n          if (!sub.closed) {\n            sub.unsubscribe();\n          }\n        };\n      });\n  }\n\n  public request(op: Operation): LinkObservable<FetchResult> | null {\n    return this.requester(op);\n  }\n}\n\n@Injectable()\nexport class HttpLink {\n  constructor(private httpClient: HttpClient) {}\n\n  public create(options: Options): HttpLinkHandler {\n    return new HttpLinkHandler(this.httpClient, options);\n  }\n}\n","import {NgModule} from '@angular/core';\n\nimport {HttpLink} from './HttpLink';\n\nexport const PROVIDERS = [HttpLink];\n\n@NgModule({\n  providers: PROVIDERS,\n})\nexport class HttpLinkModule {}\n"],"names":["tslib_1.__extends","LinkObservable"],"mappings":"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"}
