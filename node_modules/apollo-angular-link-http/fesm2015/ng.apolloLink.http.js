import { Injectable, NgModule } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApolloLink, Observable } from 'apollo-link';
import { print } from 'graphql/language/printer';
import { fetch, mergeHeaders, prioritize } from 'apollo-angular-link-http-common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// XXX find a better name for it
class HttpLinkHandler extends ApolloLink {
    /**
     * @param {?} httpClient
     * @param {?} options
     */
    constructor(httpClient, options) {
        super();
        this.httpClient = httpClient;
        this.options = options;
        this.requester = (operation) => new Observable((observer) => {
            /** @type {?} */
            const context = operation.getContext();
            // decides which value to pick, Context, Options or to just use the default
            /** @type {?} */
            const pick = (key, init) => {
                return prioritize(context[key], this.options[key], init);
            };
            /** @type {?} */
            const includeQuery = pick('includeQuery', true);
            /** @type {?} */
            const includeExtensions = pick('includeExtensions', false);
            /** @type {?} */
            const method = pick('method', 'POST');
            /** @type {?} */
            const url = pick('uri', 'graphql');
            /** @type {?} */
            const withCredentials = pick('withCredentials');
            /** @type {?} */
            const req = {
                method,
                url,
                body: {
                    operationName: operation.operationName,
                    variables: operation.variables,
                },
                options: {
                    withCredentials,
                    headers: this.options.headers,
                },
            };
            if (includeExtensions) {
                ((/** @type {?} */ (req.body))).extensions = operation.extensions;
            }
            if (includeQuery) {
                ((/** @type {?} */ (req.body))).query = print(operation.query);
            }
            if (context.headers) {
                req.options.headers = mergeHeaders(req.options.headers, context.headers);
            }
            /** @type {?} */
            const sub = fetch(req, this.httpClient).subscribe({
                next: response => {
                    operation.setContext({ response });
                    observer.next(response.body);
                },
                error: err => observer.error(err),
                complete: () => observer.complete(),
            });
            return () => {
                if (!sub.closed) {
                    sub.unsubscribe();
                }
            };
        });
    }
    /**
     * @param {?} op
     * @return {?}
     */
    request(op) {
        return this.requester(op);
    }
}
class HttpLink {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    create(options) {
        return new HttpLinkHandler(this.httpClient, options);
    }
}
HttpLink.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpLink.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const PROVIDERS = [HttpLink];
class HttpLinkModule {
}
HttpLinkModule.decorators = [
    { type: NgModule, args: [{
                providers: PROVIDERS,
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { HttpLink, HttpLinkHandler, HttpLinkModule, PROVIDERS };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcuYXBvbGxvTGluay5odHRwLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9hcG9sbG8tYW5ndWxhci1saW5rLWh0dHAvSHR0cExpbmsudHMiLCJuZzovL2Fwb2xsby1hbmd1bGFyLWxpbmstaHR0cC9IdHRwTGlua01vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge1xuICBBcG9sbG9MaW5rLFxuICBPYnNlcnZhYmxlIGFzIExpbmtPYnNlcnZhYmxlLFxuICBPcGVyYXRpb24sXG4gIFJlcXVlc3RIYW5kbGVyLFxuICBGZXRjaFJlc3VsdCxcbn0gZnJvbSAnYXBvbGxvLWxpbmsnO1xuaW1wb3J0IHtwcmludH0gZnJvbSAnZ3JhcGhxbC9sYW5ndWFnZS9wcmludGVyJztcbmltcG9ydCB7XG4gIGZldGNoLFxuICBPcHRpb25zLFxuICBCb2R5LFxuICBSZXF1ZXN0LFxuICBDb250ZXh0LFxuICBtZXJnZUhlYWRlcnMsXG4gIHByaW9yaXRpemUsXG59IGZyb20gJ2Fwb2xsby1hbmd1bGFyLWxpbmstaHR0cC1jb21tb24nO1xuXG4vLyBYWFggZmluZCBhIGJldHRlciBuYW1lIGZvciBpdFxuZXhwb3J0IGNsYXNzIEh0dHBMaW5rSGFuZGxlciBleHRlbmRzIEFwb2xsb0xpbmsge1xuICBwdWJsaWMgcmVxdWVzdGVyOiBSZXF1ZXN0SGFuZGxlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIHByaXZhdGUgb3B0aW9uczogT3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnJlcXVlc3RlciA9IChvcGVyYXRpb246IE9wZXJhdGlvbikgPT5cbiAgICAgIG5ldyBMaW5rT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjb250ZXh0OiBDb250ZXh0ID0gb3BlcmF0aW9uLmdldENvbnRleHQoKTtcblxuICAgICAgICAvLyBkZWNpZGVzIHdoaWNoIHZhbHVlIHRvIHBpY2ssIENvbnRleHQsIE9wdGlvbnMgb3IgdG8ganVzdCB1c2UgdGhlIGRlZmF1bHRcbiAgICAgICAgY29uc3QgcGljayA9IDxLIGV4dGVuZHMga2V5b2YgQ29udGV4dCB8IGtleW9mIE9wdGlvbnM+KFxuICAgICAgICAgIGtleTogSyxcbiAgICAgICAgICBpbml0PzogQ29udGV4dFtLXSB8IE9wdGlvbnNbS10sXG4gICAgICAgICk6IENvbnRleHRbS10gfCBPcHRpb25zW0tdID0+IHtcbiAgICAgICAgICByZXR1cm4gcHJpb3JpdGl6ZShjb250ZXh0W2tleV0sIHRoaXMub3B0aW9uc1trZXldLCBpbml0KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBpbmNsdWRlUXVlcnkgPSBwaWNrKCdpbmNsdWRlUXVlcnknLCB0cnVlKTtcbiAgICAgICAgY29uc3QgaW5jbHVkZUV4dGVuc2lvbnMgPSBwaWNrKCdpbmNsdWRlRXh0ZW5zaW9ucycsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gcGljaygnbWV0aG9kJywgJ1BPU1QnKTtcbiAgICAgICAgY29uc3QgdXJsID0gcGljaygndXJpJywgJ2dyYXBocWwnKTtcbiAgICAgICAgY29uc3Qgd2l0aENyZWRlbnRpYWxzID0gcGljaygnd2l0aENyZWRlbnRpYWxzJyk7XG5cbiAgICAgICAgY29uc3QgcmVxOiBSZXF1ZXN0ID0ge1xuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZTogb3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IG9wZXJhdGlvbi52YXJpYWJsZXMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpbmNsdWRlRXh0ZW5zaW9ucykge1xuICAgICAgICAgIChyZXEuYm9keSBhcyBCb2R5KS5leHRlbnNpb25zID0gb3BlcmF0aW9uLmV4dGVuc2lvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5jbHVkZVF1ZXJ5KSB7XG4gICAgICAgICAgKHJlcS5ib2R5IGFzIEJvZHkpLnF1ZXJ5ID0gcHJpbnQob3BlcmF0aW9uLnF1ZXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0LmhlYWRlcnMpIHtcbiAgICAgICAgICByZXEub3B0aW9ucy5oZWFkZXJzID0gbWVyZ2VIZWFkZXJzKFxuICAgICAgICAgICAgcmVxLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgIGNvbnRleHQuaGVhZGVycyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3ViID0gZmV0Y2gocmVxLCB0aGlzLmh0dHBDbGllbnQpLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgb3BlcmF0aW9uLnNldENvbnRleHQoe3Jlc3BvbnNlfSk7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGVyciA9PiBvYnNlcnZlci5lcnJvcihlcnIpLFxuICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiBvYnNlcnZlci5jb21wbGV0ZSgpLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGlmICghc3ViLmNsb3NlZCkge1xuICAgICAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVxdWVzdChvcDogT3BlcmF0aW9uKTogTGlua09ic2VydmFibGU8RmV0Y2hSZXN1bHQ+IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdGVyKG9wKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSHR0cExpbmsge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XG5cbiAgcHVibGljIGNyZWF0ZShvcHRpb25zOiBPcHRpb25zKTogSHR0cExpbmtIYW5kbGVyIHtcbiAgICByZXR1cm4gbmV3IEh0dHBMaW5rSGFuZGxlcih0aGlzLmh0dHBDbGllbnQsIG9wdGlvbnMpO1xuICB9XG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtIdHRwTGlua30gZnJvbSAnLi9IdHRwTGluayc7XG5cbmV4cG9ydCBjb25zdCBQUk9WSURFUlMgPSBbSHR0cExpbmtdO1xuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFBST1ZJREVSUyxcbn0pXG5leHBvcnQgY2xhc3MgSHR0cExpbmtNb2R1bGUge31cbiJdLCJuYW1lcyI6WyJMaW5rT2JzZXJ2YWJsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBcUJBLE1BQWEsZUFBZ0IsU0FBUSxVQUFVOzs7OztJQUc3QyxZQUFvQixVQUFzQixFQUFVLE9BQWdCO1FBQ2xFLEtBQUssRUFBRSxDQUFDO1FBRFUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFHbEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLFNBQW9CLEtBQ3BDLElBQUlBLFVBQWMsQ0FBQyxDQUFDLFFBQWE7O2tCQUN6QixPQUFPLEdBQVksU0FBUyxDQUFDLFVBQVUsRUFBRTs7O2tCQUd6QyxJQUFJLEdBQUcsQ0FDWCxHQUFNLEVBQ04sSUFBOEI7Z0JBRTlCLE9BQU8sVUFBVSxDQUFDLE9B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