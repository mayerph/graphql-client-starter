/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Observable } from 'rxjs';
/** @type {?} */
export var fetch = function (req, httpClient) {
    /** @type {?} */
    var shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
    /** @type {?} */
    var shouldStringify = function (param) {
        return ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;
    };
    // `body` for some, `params` for others
    /** @type {?} */
    var bodyOrParams = {};
    if (((/** @type {?} */ (req.body))).length) {
        if (!shouldUseBody) {
            return new Observable(function (observer) {
                return observer.error(new Error('Batching is not available for GET requests'));
            });
        }
        bodyOrParams = {
            body: req.body,
        };
    }
    else {
        if (shouldUseBody) {
            bodyOrParams = {
                body: req.body,
            };
        }
        else {
            Object.keys(req.body).forEach(function (param) {
                if (shouldStringify(param.toLowerCase())) {
                    ((/** @type {?} */ (req.body)))[param] = JSON.stringify(((/** @type {?} */ (req.body)))[param]);
                }
            });
            bodyOrParams = { params: req.body };
        }
    }
    // create a request
    return httpClient.request(req.method, req.url, tslib_1.__assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
};
/** @type {?} */
export var mergeHeaders = function (source, destination) {
    if (source && destination) {
        /** @type {?} */
        var merged = destination
            .keys()
            .reduce(function (headers, name) { return headers.set(name, destination.getAll(name)); }, source);
        return merged;
    }
    return destination || source;
};
/**
 * @template T
 * @param {...?} values
 * @return {?}
 */
export function prioritize() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    /** @type {?} */
    var picked = values.find(function (val) { return typeof val !== 'undefined'; });
    if (typeof picked === 'undefined') {
        return values[values.length - 1];
    }
    return picked;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1saW5rLWh0dHAtY29tbW9uLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQUloQyxNQUFNLEtBQU8sS0FBSyxHQUFHLFVBQ25CLEdBQVksRUFDWixVQUFzQjs7UUFFaEIsYUFBYSxHQUNqQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7O1FBQzdELGVBQWUsR0FBRyxVQUFDLEtBQWE7UUFDcEMsT0FBQSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQS9ELENBQStEOzs7UUFHN0QsWUFBWSxHQUFHLEVBQUU7SUFFckIsSUFBSSxDQUFDLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUMvQixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE9BQU8sSUFBSSxVQUFVLENBQUMsVUFBQSxRQUFRO2dCQUM1QixPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztZQUF2RSxDQUF1RSxDQUN4RSxDQUFDO1NBQ0g7UUFFRCxZQUFZLEdBQUc7WUFDYixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7U0FDZixDQUFDO0tBQ0g7U0FBTTtRQUNMLElBQUksYUFBYSxFQUFFO1lBQ2pCLFlBQVksR0FBRztnQkFDYixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7YUFDZixDQUFDO1NBQ0g7YUFBTTtZQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7Z0JBQ2pDLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFO29CQUN4QyxDQUFDLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxtQkFBQSxHQUFHLENBQUMsSUFBSSxFQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2lCQUNyRTtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsWUFBWSxHQUFHLEVBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUMsQ0FBQztTQUNuQztLQUNGO0lBRUQsbUJBQW1CO0lBQ25CLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLHFCQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUNuQixZQUFZLEVBQUUsTUFBTSxFQUNwQixjQUFjLEVBQUUsS0FBSyxJQUNsQixZQUFZLEVBQ1osR0FBRyxDQUFDLE9BQU8sRUFDZCxDQUFDO0FBQ0wsQ0FBQzs7QUFFRCxNQUFNLEtBQU8sWUFBWSxHQUFHLFVBQzFCLE1BQW1CLEVBQ25CLFdBQXdCO0lBRXhCLElBQUksTUFBTSxJQUFJLFdBQVcsRUFBRTs7WUFDbkIsTUFBTSxHQUFHLFdBQVc7YUFDdkIsSUFBSSxFQUFFO2FBQ04sTUFBTSxDQUNMLFVBQUMsT0FBTyxFQUFFLElBQUksSUFBSyxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBM0MsQ0FBMkMsRUFDOUQsTUFBTSxDQUNQO1FBRUgsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVELE9BQU8sV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUMvQixDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsVUFBVTtJQUFJLGdCQUFjO1NBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztRQUFkLDJCQUFjOzs7UUFDcEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxPQUFPLEdBQUcsS0FBSyxXQUFXLEVBQTFCLENBQTBCLENBQUM7SUFFN0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7UUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNsQztJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBIZWFkZXJzLCBIdHRwUmVzcG9uc2UsIEh0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7UmVxdWVzdH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmZXRjaCA9IChcbiAgcmVxOiBSZXF1ZXN0LFxuICBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4gPT4ge1xuICBjb25zdCBzaG91bGRVc2VCb2R5ID1cbiAgICBbJ1BPU1QnLCAnUFVUJywgJ1BBVENIJ10uaW5kZXhPZihyZXEubWV0aG9kLnRvVXBwZXJDYXNlKCkpICE9PSAtMTtcbiAgY29uc3Qgc2hvdWxkU3RyaW5naWZ5ID0gKHBhcmFtOiBzdHJpbmcpID0+XG4gICAgWyd2YXJpYWJsZXMnLCAnZXh0ZW5zaW9ucyddLmluZGV4T2YocGFyYW0udG9Mb3dlckNhc2UoKSkgIT09IC0xO1xuXG4gIC8vIGBib2R5YCBmb3Igc29tZSwgYHBhcmFtc2AgZm9yIG90aGVyc1xuICBsZXQgYm9keU9yUGFyYW1zID0ge307XG5cbiAgaWYgKChyZXEuYm9keSBhcyBCb2R5W10pLmxlbmd0aCkge1xuICAgIGlmICghc2hvdWxkVXNlQm9keSkge1xuICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+XG4gICAgICAgIG9ic2VydmVyLmVycm9yKG5ldyBFcnJvcignQmF0Y2hpbmcgaXMgbm90IGF2YWlsYWJsZSBmb3IgR0VUIHJlcXVlc3RzJykpLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBib2R5T3JQYXJhbXMgPSB7XG4gICAgICBib2R5OiByZXEuYm9keSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGlmIChzaG91bGRVc2VCb2R5KSB7XG4gICAgICBib2R5T3JQYXJhbXMgPSB7XG4gICAgICAgIGJvZHk6IHJlcS5ib2R5LFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXMocmVxLmJvZHkpLmZvckVhY2gocGFyYW0gPT4ge1xuICAgICAgICBpZiAoc2hvdWxkU3RyaW5naWZ5KHBhcmFtLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgKHJlcS5ib2R5IGFzIGFueSlbcGFyYW1dID0gSlNPTi5zdHJpbmdpZnkoKHJlcS5ib2R5IGFzIGFueSlbcGFyYW1dKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGJvZHlPclBhcmFtcyA9IHtwYXJhbXM6IHJlcS5ib2R5fTtcbiAgICB9XG4gIH1cblxuICAvLyBjcmVhdGUgYSByZXF1ZXN0XG4gIHJldHVybiBodHRwQ2xpZW50LnJlcXVlc3Q8T2JqZWN0PihyZXEubWV0aG9kLCByZXEudXJsLCB7XG4gICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyxcbiAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICByZXBvcnRQcm9ncmVzczogZmFsc2UsXG4gICAgLi4uYm9keU9yUGFyYW1zLFxuICAgIC4uLnJlcS5vcHRpb25zLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBtZXJnZUhlYWRlcnMgPSAoXG4gIHNvdXJjZTogSHR0cEhlYWRlcnMsXG4gIGRlc3RpbmF0aW9uOiBIdHRwSGVhZGVycyxcbik6IEh0dHBIZWFkZXJzID0+IHtcbiAgaWYgKHNvdXJjZSAmJiBkZXN0aW5hdGlvbikge1xuICAgIGNvbnN0IG1lcmdlZCA9IGRlc3RpbmF0aW9uXG4gICAgICAua2V5cygpXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoaGVhZGVycywgbmFtZSkgPT4gaGVhZGVycy5zZXQobmFtZSwgZGVzdGluYXRpb24uZ2V0QWxsKG5hbWUpKSxcbiAgICAgICAgc291cmNlLFxuICAgICAgKTtcblxuICAgIHJldHVybiBtZXJnZWQ7XG4gIH1cblxuICByZXR1cm4gZGVzdGluYXRpb24gfHwgc291cmNlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByaW9yaXRpemU8VD4oLi4udmFsdWVzOiBUW10pOiBUIHtcbiAgY29uc3QgcGlja2VkID0gdmFsdWVzLmZpbmQodmFsID0+IHR5cGVvZiB2YWwgIT09ICd1bmRlZmluZWQnKTtcblxuICBpZiAodHlwZW9mIHBpY2tlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHJldHVybiBwaWNrZWQ7XG59XG4iXX0=