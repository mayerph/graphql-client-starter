/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
/** @type {?} */
export const fetch = (req, httpClient) => {
    /** @type {?} */
    const shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
    /** @type {?} */
    const shouldStringify = (param) => ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;
    // `body` for some, `params` for others
    /** @type {?} */
    let bodyOrParams = {};
    if (((/** @type {?} */ (req.body))).length) {
        if (!shouldUseBody) {
            return new Observable(observer => observer.error(new Error('Batching is not available for GET requests')));
        }
        bodyOrParams = {
            body: req.body,
        };
    }
    else {
        if (shouldUseBody) {
            bodyOrParams = {
                body: req.body,
            };
        }
        else {
            Object.keys(req.body).forEach(param => {
                if (shouldStringify(param.toLowerCase())) {
                    ((/** @type {?} */ (req.body)))[param] = JSON.stringify(((/** @type {?} */ (req.body)))[param]);
                }
            });
            bodyOrParams = { params: req.body };
        }
    }
    // create a request
    return httpClient.request(req.method, req.url, Object.assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
};
/** @type {?} */
export const mergeHeaders = (source, destination) => {
    if (source && destination) {
        /** @type {?} */
        const merged = destination
            .keys()
            .reduce((headers, name) => headers.set(name, destination.getAll(name)), source);
        return merged;
    }
    return destination || source;
};
/**
 * @template T
 * @param {...?} values
 * @return {?}
 */
export function prioritize(...values) {
    /** @type {?} */
    const picked = values.find(val => typeof val !== 'undefined');
    if (typeof picked === 'undefined') {
        return values[values.length - 1];
    }
    return picked;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1saW5rLWh0dHAtY29tbW9uLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBSWhDLE1BQU0sT0FBTyxLQUFLLEdBQUcsQ0FDbkIsR0FBWSxFQUNaLFVBQXNCLEVBQ1ksRUFBRTs7VUFDOUIsYUFBYSxHQUNqQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7O1VBQzdELGVBQWUsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQ3hDLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7OztRQUc3RCxZQUFZLEdBQUcsRUFBRTtJQUVyQixJQUFJLENBQUMsbUJBQUEsR0FBRyxDQUFDLElBQUksRUFBVSxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQy9CLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUMvQixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FDeEUsQ0FBQztTQUNIO1FBRUQsWUFBWSxHQUFHO1lBQ2IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO1NBQ2YsQ0FBQztLQUNIO1NBQU07UUFDTCxJQUFJLGFBQWEsRUFBRTtZQUNqQixZQUFZLEdBQUc7Z0JBQ2IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO2FBQ2YsQ0FBQztTQUNIO2FBQU07WUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3BDLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFO29CQUN4QyxDQUFDLG1CQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxtQkFBQSxHQUFHLENBQUMsSUFBSSxFQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2lCQUNyRTtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsWUFBWSxHQUFHLEVBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUMsQ0FBQztTQUNuQztLQUNGO0lBRUQsbUJBQW1CO0lBQ25CLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLGtCQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUNuQixZQUFZLEVBQUUsTUFBTSxFQUNwQixjQUFjLEVBQUUsS0FBSyxJQUNsQixZQUFZLEVBQ1osR0FBRyxDQUFDLE9BQU8sRUFDZCxDQUFDO0FBQ0wsQ0FBQzs7QUFFRCxNQUFNLE9BQU8sWUFBWSxHQUFHLENBQzFCLE1BQW1CLEVBQ25CLFdBQXdCLEVBQ1gsRUFBRTtJQUNmLElBQUksTUFBTSxJQUFJLFdBQVcsRUFBRTs7Y0FDbkIsTUFBTSxHQUFHLFdBQVc7YUFDdkIsSUFBSSxFQUFFO2FBQ04sTUFBTSxDQUNMLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUM5RCxNQUFNLENBQ1A7UUFFSCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBRUQsT0FBTyxXQUFXLElBQUksTUFBTSxDQUFDO0FBQy9CLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUksR0FBRyxNQUFXOztVQUNwQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFLLFdBQVcsQ0FBQztJQUU3RCxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtRQUNqQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cEhlYWRlcnMsIEh0dHBSZXNwb25zZSwgSHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtSZXF1ZXN0fSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGZldGNoID0gKFxuICByZXE6IFJlcXVlc3QsXG4gIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXG4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxPYmplY3Q+PiA9PiB7XG4gIGNvbnN0IHNob3VsZFVzZUJvZHkgPVxuICAgIFsnUE9TVCcsICdQVVQnLCAnUEFUQ0gnXS5pbmRleE9mKHJlcS5tZXRob2QudG9VcHBlckNhc2UoKSkgIT09IC0xO1xuICBjb25zdCBzaG91bGRTdHJpbmdpZnkgPSAocGFyYW06IHN0cmluZykgPT5cbiAgICBbJ3ZhcmlhYmxlcycsICdleHRlbnNpb25zJ10uaW5kZXhPZihwYXJhbS50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7XG5cbiAgLy8gYGJvZHlgIGZvciBzb21lLCBgcGFyYW1zYCBmb3Igb3RoZXJzXG4gIGxldCBib2R5T3JQYXJhbXMgPSB7fTtcblxuICBpZiAoKHJlcS5ib2R5IGFzIEJvZHlbXSkubGVuZ3RoKSB7XG4gICAgaWYgKCFzaG91bGRVc2VCb2R5KSB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT5cbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IobmV3IEVycm9yKCdCYXRjaGluZyBpcyBub3QgYXZhaWxhYmxlIGZvciBHRVQgcmVxdWVzdHMnKSksXG4gICAgICApO1xuICAgIH1cblxuICAgIGJvZHlPclBhcmFtcyA9IHtcbiAgICAgIGJvZHk6IHJlcS5ib2R5LFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNob3VsZFVzZUJvZHkpIHtcbiAgICAgIGJvZHlPclBhcmFtcyA9IHtcbiAgICAgICAgYm9keTogcmVxLmJvZHksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3Qua2V5cyhyZXEuYm9keSkuZm9yRWFjaChwYXJhbSA9PiB7XG4gICAgICAgIGlmIChzaG91bGRTdHJpbmdpZnkocGFyYW0udG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAocmVxLmJvZHkgYXMgYW55KVtwYXJhbV0gPSBKU09OLnN0cmluZ2lmeSgocmVxLmJvZHkgYXMgYW55KVtwYXJhbV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgYm9keU9yUGFyYW1zID0ge3BhcmFtczogcmVxLmJvZHl9O1xuICAgIH1cbiAgfVxuXG4gIC8vIGNyZWF0ZSBhIHJlcXVlc3RcbiAgcmV0dXJuIGh0dHBDbGllbnQucmVxdWVzdDxPYmplY3Q+KHJlcS5tZXRob2QsIHJlcS51cmwsIHtcbiAgICBvYnNlcnZlOiAncmVzcG9uc2UnLFxuICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgIHJlcG9ydFByb2dyZXNzOiBmYWxzZSxcbiAgICAuLi5ib2R5T3JQYXJhbXMsXG4gICAgLi4ucmVxLm9wdGlvbnMsXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IG1lcmdlSGVhZGVycyA9IChcbiAgc291cmNlOiBIdHRwSGVhZGVycyxcbiAgZGVzdGluYXRpb246IEh0dHBIZWFkZXJzLFxuKTogSHR0cEhlYWRlcnMgPT4ge1xuICBpZiAoc291cmNlICYmIGRlc3RpbmF0aW9uKSB7XG4gICAgY29uc3QgbWVyZ2VkID0gZGVzdGluYXRpb25cbiAgICAgIC5rZXlzKClcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChoZWFkZXJzLCBuYW1lKSA9PiBoZWFkZXJzLnNldChuYW1lLCBkZXN0aW5hdGlvbi5nZXRBbGwobmFtZSkpLFxuICAgICAgICBzb3VyY2UsXG4gICAgICApO1xuXG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfVxuXG4gIHJldHVybiBkZXN0aW5hdGlvbiB8fCBzb3VyY2U7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpb3JpdGl6ZTxUPiguLi52YWx1ZXM6IFRbXSk6IFQge1xuICBjb25zdCBwaWNrZWQgPSB2YWx1ZXMuZmluZCh2YWwgPT4gdHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcpO1xuXG4gIGlmICh0eXBlb2YgcGlja2VkID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgcmV0dXJuIHBpY2tlZDtcbn1cbiJdfQ==