{"version":3,"file":"ng.apolloLink.httpCommon.js.map","sources":["ng://apollo-angular-link-http-common/utils.ts"],"sourcesContent":["import {HttpHeaders, HttpResponse, HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\nimport {Request} from './types';\n\nexport const fetch = (\n  req: Request,\n  httpClient: HttpClient,\n): Observable<HttpResponse<Object>> => {\n  const shouldUseBody =\n    ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;\n  const shouldStringify = (param: string) =>\n    ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;\n\n  // `body` for some, `params` for others\n  let bodyOrParams = {};\n\n  if ((req.body as Body[]).length) {\n    if (!shouldUseBody) {\n      return new Observable(observer =>\n        observer.error(new Error('Batching is not available for GET requests')),\n      );\n    }\n\n    bodyOrParams = {\n      body: req.body,\n    };\n  } else {\n    if (shouldUseBody) {\n      bodyOrParams = {\n        body: req.body,\n      };\n    } else {\n      Object.keys(req.body).forEach(param => {\n        if (shouldStringify(param.toLowerCase())) {\n          (req.body as any)[param] = JSON.stringify((req.body as any)[param]);\n        }\n      });\n\n      bodyOrParams = {params: req.body};\n    }\n  }\n\n  // create a request\n  return httpClient.request<Object>(req.method, req.url, {\n    observe: 'response',\n    responseType: 'json',\n    reportProgress: false,\n    ...bodyOrParams,\n    ...req.options,\n  });\n};\n\nexport const mergeHeaders = (\n  source: HttpHeaders,\n  destination: HttpHeaders,\n): HttpHeaders => {\n  if (source && destination) {\n    const merged = destination\n      .keys()\n      .reduce(\n        (headers, name) => headers.set(name, destination.getAll(name)),\n        source,\n      );\n\n    return merged;\n  }\n\n  return destination || source;\n};\n\nexport function prioritize<T>(...values: T[]): T {\n  const picked = values.find(val => typeof val !== 'undefined');\n\n  if (typeof picked === 'undefined') {\n    return values[values.length - 1];\n  }\n\n  return picked;\n}\n"],"names":[],"mappings":";;;;;;AACA;AAIA,MAAa,KAAK,GAAG,CACnB,GAAY,EACZ,UAAsB;;UAEhB,aAAa,GACjB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC;;UAC7D,eAAe,GAAG,CAAC,KAAa,KACpC,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC;;;QAG7D,YAAY,GAAG,EAAE;IAErB,IAAI,oBAAC,GAAG,CAAC,IAAI,IAAY,MAAM,EAAE;QAC/B,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,IAAI,UAAU,CAAC,QAAQ,IAC5B,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC,CACxE,CAAC;SACH;QAED,YAAY,GAAG;YACb,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC;KACH;SAAM;QACL,IAAI,aAAa,EAAE;YACjB,YAAY,GAAG;gBACb,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC;SACH;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK;gBACjC,IAAI,eAAe,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE;oBACxC,oBAAC,GAAG,CAAC,IAAI,IAAS,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,oBAAC,GAAG,CAAC,IAAI,IAAS,KAAK,CAAC,CAAC,CAAC;iBACrE;aACF,CAAC,CAAC;YAEH,YAAY,GAAG,EAAC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAC,CAAC;SACnC;KACF;;IAGD,OAAO,UAAU,CAAC,OAAO,CAAS,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,kBACnD,OAAO,EAAE,UAAU,EACnB,YAAY,EAAE,MAAM,EACpB,cAAc,EAAE,KAAK,IAClB,YAAY,EACZ,GAAG,CAAC,OAAO,EACd,CAAC;CACJ;;AAED,MAAa,YAAY,GAAG,CAC1B,MAAmB,EACnB,WAAwB;IAExB,IAAI,MAAM,IAAI,WAAW,EAAE;;cACnB,MAAM,GAAG,WAAW;aACvB,IAAI,EAAE;aACN,MAAM,CACL,CAAC,OAAO,EAAE,IAAI,KAAK,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAC9D,MAAM,CACP;QAEH,OAAO,MAAM,CAAC;KACf;IAED,OAAO,WAAW,IAAI,MAAM,CAAC;CAC9B;;;;;;AAED,SAAgB,UAAU,CAAI,GAAG,MAAW;;UACpC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,WAAW,CAAC;IAE7D,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QACjC,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAClC;IAED,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;;;;;;;;;"}
