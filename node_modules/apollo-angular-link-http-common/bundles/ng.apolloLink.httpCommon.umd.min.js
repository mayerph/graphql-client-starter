!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("rxjs")):"function"==typeof define&&define.amd?define("apollo-angular-link-http-common",["exports","rxjs"],r):r(e["ng.apolloLink.httpCommon"]={},e.rxjs)}(this,function(e,t){"use strict";var i=function(){return(i=Object.assign||function(e){for(var r,o=1,n=arguments.length;o<n;o++)for(var t in r=arguments[o])Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t]);return e}).apply(this,arguments)};e.prioritize=function n(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o=e.find(function(e){return void 0!==e});return void 0===o?e[e.length-1]:o},e.fetch=function(o,e){var r=-1!==["POST","PUT","PATCH"].indexOf(o.method.toUpperCase()),n={};if(o.body.length){if(!r)return new t.Observable(function(e){return e.error(new Error("Batching is not available for GET requests"))});n={body:o.body}}else n=r?{body:o.body}:(Object.keys(o.body).forEach(function(e){var r;r=e.toLowerCase(),-1!==["variables","extensions"].indexOf(r.toLowerCase())&&(o.body[e]=JSON.stringify(o.body[e]))}),{params:o.body});return e.request(o.method,o.url,i({observe:"response",responseType:"json",reportProgress:!1},n,o.options))},e.mergeHeaders=function(e,o){return e&&o?o.keys().reduce(function(e,r){return e.set(r,o.getAll(r))},e):o||e},Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ng.apolloLink.httpCommon.umd.min.js.map