/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ApolloModule, Apollo } from 'apollo-angular';
import { ApolloLink } from 'apollo-link';
import { InMemoryCache } from 'apollo-cache-inmemory';
import { ApolloCache } from 'apollo-cache';
import { NgModule, InjectionToken, Inject, Optional } from '@angular/core';
import { ApolloTestingController } from './controller';
import { ApolloTestingBackend } from './backend';
/** @type {?} */
export const APOLLO_TESTING_CACHE = new InjectionToken('apollo-angular/testing cache');
export class ApolloTestingModule {
    /**
     * @param {?} apollo
     * @param {?} backend
     * @param {?=} cache
     */
    constructor(apollo, backend, cache) {
        apollo.create({
            link: new ApolloLink(operation => backend.handle(operation)),
            cache: cache ||
                new InMemoryCache({
                    addTypename: false,
                }),
        });
    }
}
ApolloTestingModule.decorators = [
    { type: NgModule, args: [{
                imports: [ApolloModule],
                providers: [
                    ApolloTestingBackend,
                    { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
                ],
            },] }
];
/** @nocollapse */
ApolloTestingModule.ctorParameters = () => [
    { type: Apollo },
    { type: ApolloTestingBackend },
    { type: ApolloCache, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CACHE,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXBvbGxvLWFuZ3VsYXIvdGVzdGluZy8iLCJzb3VyY2VzIjpbIm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxRQUFRLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3JELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7QUFFL0MsTUFBTSxPQUFPLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUNwRCw4QkFBOEIsQ0FDL0I7QUFTRCxNQUFNLE9BQU8sbUJBQW1COzs7Ozs7SUFDOUIsWUFDRSxNQUFjLEVBQ2QsT0FBNkIsRUFHN0IsS0FBd0I7UUFFeEIsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNaLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDNUQsS0FBSyxFQUNILEtBQUs7Z0JBQ0wsSUFBSSxhQUFhLENBQUM7b0JBQ2hCLFdBQVcsRUFBRSxLQUFLO2lCQUNuQixDQUFDO1NBQ0wsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBdkJGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7Z0JBQ3ZCLFNBQVMsRUFBRTtvQkFDVCxvQkFBb0I7b0JBQ3BCLEVBQUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBQztpQkFDdEU7YUFDRjs7OztZQW5CcUIsTUFBTTtZQU9wQixvQkFBb0I7WUFKcEIsV0FBVyx1QkFxQmQsUUFBUSxZQUNSLE1BQU0sU0FBQyxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Fwb2xsb01vZHVsZSwgQXBvbGxvfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XG5pbXBvcnQge0Fwb2xsb0xpbmt9IGZyb20gJ2Fwb2xsby1saW5rJztcbmltcG9ydCB7SW5NZW1vcnlDYWNoZX0gZnJvbSAnYXBvbGxvLWNhY2hlLWlubWVtb3J5JztcbmltcG9ydCB7QXBvbGxvQ2FjaGV9IGZyb20gJ2Fwb2xsby1jYWNoZSc7XG5pbXBvcnQge05nTW9kdWxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0LCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7QXBvbGxvVGVzdGluZ0NvbnRyb2xsZXJ9IGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQge0Fwb2xsb1Rlc3RpbmdCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQnO1xuXG5leHBvcnQgY29uc3QgQVBPTExPX1RFU1RJTkdfQ0FDSEUgPSBuZXcgSW5qZWN0aW9uVG9rZW48QXBvbGxvQ2FjaGU8YW55Pj4oXG4gICdhcG9sbG8tYW5ndWxhci90ZXN0aW5nIGNhY2hlJyxcbik7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtBcG9sbG9Nb2R1bGVdLFxuICBwcm92aWRlcnM6IFtcbiAgICBBcG9sbG9UZXN0aW5nQmFja2VuZCxcbiAgICB7cHJvdmlkZTogQXBvbGxvVGVzdGluZ0NvbnRyb2xsZXIsIHVzZUV4aXN0aW5nOiBBcG9sbG9UZXN0aW5nQmFja2VuZH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEFwb2xsb1Rlc3RpbmdNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBhcG9sbG86IEFwb2xsbyxcbiAgICBiYWNrZW5kOiBBcG9sbG9UZXN0aW5nQmFja2VuZCxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQVBPTExPX1RFU1RJTkdfQ0FDSEUpXG4gICAgY2FjaGU/OiBBcG9sbG9DYWNoZTxhbnk+LFxuICApIHtcbiAgICBhcG9sbG8uY3JlYXRlKHtcbiAgICAgIGxpbms6IG5ldyBBcG9sbG9MaW5rKG9wZXJhdGlvbiA9PiBiYWNrZW5kLmhhbmRsZShvcGVyYXRpb24pKSxcbiAgICAgIGNhY2hlOlxuICAgICAgICBjYWNoZSB8fFxuICAgICAgICBuZXcgSW5NZW1vcnlDYWNoZSh7XG4gICAgICAgICAgYWRkVHlwZW5hbWU6IGZhbHNlLFxuICAgICAgICB9KSxcbiAgICB9KTtcbiAgfVxufVxuIl19