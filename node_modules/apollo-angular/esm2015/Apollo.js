/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject, NgZone } from '@angular/core';
import { ApolloClient, } from 'apollo-client';
import { from } from 'rxjs';
import { QueryRef } from './QueryRef';
import { APOLLO_OPTIONS } from './tokens';
import { fromPromise, wrapWithZone, fixObservable } from './utils';
/**
 * @template TCacheShape
 */
export class ApolloBase {
    /**
     * @param {?} ngZone
     * @param {?=} _client
     */
    constructor(ngZone, _client) {
        this.ngZone = ngZone;
        this._client = _client;
    }
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    watchQuery(options) {
        return new QueryRef((/** @type {?} */ (this.client.watchQuery(Object.assign({}, options)))), this.ngZone);
    }
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    query(options) {
        return fromPromise(() => this.client.query(Object.assign({}, options)));
    }
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    mutate(options) {
        return fromPromise(() => this.client.mutate(Object.assign({}, options)));
    }
    /**
     * @template T, V
     * @param {?} options
     * @param {?=} extra
     * @return {?}
     */
    subscribe(options, extra) {
        /** @type {?} */
        const obs = from(fixObservable(this.client.subscribe(Object.assign({}, options))));
        return extra && extra.useZone !== true
            ? obs
            : wrapWithZone(obs, this.ngZone);
    }
    /**
     * @return {?}
     */
    getClient() {
        return this._client;
    }
    /**
     * @param {?} client
     * @return {?}
     */
    setClient(client) {
        if (this._client) {
            throw new Error('Client has been already defined');
        }
        this._client = client;
    }
    /**
     * @return {?}
     */
    get client() {
        this.beforeEach();
        return this._client;
    }
    /**
     * @return {?}
     */
    beforeEach() {
        this.checkInstance();
    }
    /**
     * @return {?}
     */
    checkInstance() {
        if (!this._client) {
            throw new Error('Client has not been defined yet');
        }
    }
}
if (false) {
    /** @type {?} */
    ApolloBase.prototype.ngZone;
    /** @type {?} */
    ApolloBase.prototype._client;
}
export class Apollo extends ApolloBase {
    /**
     * @param {?} _ngZone
     * @param {?=} apolloOptions
     */
    constructor(_ngZone, apolloOptions) {
        super(_ngZone);
        this._ngZone = _ngZone;
        this.map = new Map();
        if (apolloOptions) {
            this.createDefault(apolloOptions);
        }
    }
    /**
     * @template TCacheShape
     * @param {?} options
     * @param {?=} name
     * @return {?}
     */
    create(options, name) {
        if (name && name !== 'default') {
            this.createNamed(name, options);
        }
        else {
            this.createDefault(options);
        }
    }
    /**
     * @return {?}
     */
    default() {
        return this;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    use(name) {
        if (name === 'default') {
            return this.default();
        }
        return this.map.get(name);
    }
    /**
     * @template TCacheShape
     * @param {?} options
     * @return {?}
     */
    createDefault(options) {
        if (this.getClient()) {
            throw new Error('Apollo has been already created.');
        }
        return this.setClient(new ApolloClient(options));
    }
    /**
     * @template TCacheShape
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    createNamed(name, options) {
        if (this.map.has(name)) {
            throw new Error(`Client ${name} has been already created`);
        }
        this.map.set(name, new ApolloBase(this._ngZone, new ApolloClient(options)));
    }
}
Apollo.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Apollo.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_OPTIONS,] }] }
];
if (false) {
    /** @type {?} */
    Apollo.prototype.map;
    /** @type {?} */
    Apollo.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,