/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { from } from 'rxjs';
import { wrapWithZone, fixObservable } from './utils';
/**
 * @template T, V
 */
export class QueryRef {
    /**
     * @param {?} obsQuery
     * @param {?} ngZone
     */
    constructor(obsQuery, ngZone) {
        this.obsQuery = obsQuery;
        this.valueChanges = wrapWithZone(from(fixObservable(this.obsQuery)), ngZone);
        this.queryId = this.obsQuery.queryId;
    }
    // ObservableQuery's methods
    /**
     * @return {?}
     */
    result() {
        return this.obsQuery.result();
    }
    /**
     * @return {?}
     */
    currentResult() {
        return this.obsQuery.currentResult();
    }
    /**
     * @return {?}
     */
    getLastResult() {
        return this.obsQuery.getLastResult();
    }
    /**
     * @return {?}
     */
    getLastError() {
        return this.obsQuery.getLastError();
    }
    /**
     * @return {?}
     */
    resetLastResults() {
        return this.obsQuery.resetLastResults();
    }
    /**
     * @param {?=} variables
     * @return {?}
     */
    refetch(variables) {
        return this.obsQuery.refetch(variables);
    }
    /**
     * @template K
     * @param {?} fetchMoreOptions
     * @return {?}
     */
    fetchMore(fetchMoreOptions) {
        return this.obsQuery.fetchMore(fetchMoreOptions);
    }
    /**
     * @template MT, MV
     * @param {?} options
     * @return {?}
     */
    subscribeToMore(options) {
        // XXX: there's a bug in apollo-client typings
        // it should not inherit types from ObservableQuery
        return this.obsQuery.subscribeToMore((/** @type {?} */ (options)));
    }
    /**
     * @param {?} mapFn
     * @return {?}
     */
    updateQuery(mapFn) {
        return this.obsQuery.updateQuery(mapFn);
    }
    /**
     * @return {?}
     */
    stopPolling() {
        return this.obsQuery.stopPolling();
    }
    /**
     * @param {?} pollInterval
     * @return {?}
     */
    startPolling(pollInterval) {
        return this.obsQuery.startPolling(pollInterval);
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    setOptions(opts) {
        return this.obsQuery.setOptions(opts);
    }
    /**
     * @param {?} variables
     * @param {?=} tryFetch
     * @param {?=} fetchResults
     * @return {?}
     */
    setVariables(variables, tryFetch = false, fetchResults = true) {
        return this.obsQuery.setVariables(variables, tryFetch, fetchResults);
    }
}
if (false) {
    /** @type {?} */
    QueryRef.prototype.valueChanges;
    /** @type {?} */
    QueryRef.prototype.queryId;
    /** @type {?} */
    QueryRef.prototype.obsQuery;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVlcnlSZWYuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci8iLCJzb3VyY2VzIjpbIlF1ZXJ5UmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFXQSxPQUFPLEVBQWEsSUFBSSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRXRDLE9BQU8sRUFBQyxZQUFZLEVBQUUsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDOzs7O0FBR3BELE1BQU0sT0FBTyxRQUFROzs7OztJQUluQixZQUFvQixRQUErQixFQUFFLE1BQWM7UUFBL0MsYUFBUSxHQUFSLFFBQVEsQ0FBdUI7UUFDakQsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQzlCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ2xDLE1BQU0sQ0FDUCxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUN2QyxDQUFDOzs7OztJQUlNLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVNLGFBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFTSxhQUFhO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QyxDQUFDOzs7O0lBRU0sWUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7OztJQUVNLGdCQUFnQjtRQUNyQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQyxDQUFDOzs7OztJQUVNLE9BQU8sQ0FBQyxTQUFhO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Ozs7O0lBRU0sU0FBUyxDQUNkLGdCQUFzRTtRQUV0RSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7O0lBRU0sZUFBZSxDQUNwQixPQUF1QztRQUV2Qyw4Q0FBOEM7UUFDOUMsbURBQW1EO1FBQ25ELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsbUJBQUEsT0FBTyxFQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7OztJQUNNLFdBQVcsQ0FDaEIsS0FBb0U7UUFFcEUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFFTSxZQUFZLENBQUMsWUFBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs7OztJQUVNLFVBQVUsQ0FBQyxJQUFTO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7OztJQUVNLFlBQVksQ0FDakIsU0FBWSxFQUNaLFdBQW9CLEtBQUssRUFDekIsWUFBWSxHQUFHLElBQUk7UUFFbkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7Q0FDRjs7O0lBM0VDLGdDQUFzRDs7SUFDdEQsMkJBQXVCOztJQUVYLDRCQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFwb2xsb1F1ZXJ5UmVzdWx0LFxuICBPYnNlcnZhYmxlUXVlcnksXG4gIEFwb2xsb0Vycm9yLFxuICBGZXRjaE1vcmVRdWVyeU9wdGlvbnMsXG4gIEZldGNoTW9yZU9wdGlvbnMsXG4gIFN1YnNjcmliZVRvTW9yZU9wdGlvbnMsXG4gIFVwZGF0ZVF1ZXJ5T3B0aW9ucyxcbiAgQXBvbGxvQ3VycmVudFJlc3VsdCxcbn0gZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5pbXBvcnQge09ic2VydmFibGUsIGZyb219IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge3dyYXBXaXRoWm9uZSwgZml4T2JzZXJ2YWJsZX0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge1J9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgUXVlcnlSZWY8VCwgViA9IFI+IHtcbiAgcHVibGljIHZhbHVlQ2hhbmdlczogT2JzZXJ2YWJsZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj47XG4gIHB1YmxpYyBxdWVyeUlkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvYnNRdWVyeTogT2JzZXJ2YWJsZVF1ZXJ5PFQsIFY+LCBuZ1pvbmU6IE5nWm9uZSkge1xuICAgIHRoaXMudmFsdWVDaGFuZ2VzID0gd3JhcFdpdGhab25lKFxuICAgICAgZnJvbShmaXhPYnNlcnZhYmxlKHRoaXMub2JzUXVlcnkpKSxcbiAgICAgIG5nWm9uZSxcbiAgICApO1xuICAgIHRoaXMucXVlcnlJZCA9IHRoaXMub2JzUXVlcnkucXVlcnlJZDtcbiAgfVxuXG4gIC8vIE9ic2VydmFibGVRdWVyeSdzIG1ldGhvZHNcblxuICBwdWJsaWMgcmVzdWx0KCk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5yZXN1bHQoKTtcbiAgfVxuXG4gIHB1YmxpYyBjdXJyZW50UmVzdWx0KCk6IEFwb2xsb0N1cnJlbnRSZXN1bHQ8VD4ge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LmN1cnJlbnRSZXN1bHQoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMYXN0UmVzdWx0KCk6IEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+IHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5nZXRMYXN0UmVzdWx0KCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGFzdEVycm9yKCk6IEFwb2xsb0Vycm9yIHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5nZXRMYXN0RXJyb3IoKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldExhc3RSZXN1bHRzKCk6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnJlc2V0TGFzdFJlc3VsdHMoKTtcbiAgfVxuXG4gIHB1YmxpYyByZWZldGNoKHZhcmlhYmxlcz86IFYpOiBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PiB7XG4gICAgcmV0dXJuIHRoaXMub2JzUXVlcnkucmVmZXRjaCh2YXJpYWJsZXMpO1xuICB9XG5cbiAgcHVibGljIGZldGNoTW9yZTxLIGV4dGVuZHMga2V5b2YgVj4oXG4gICAgZmV0Y2hNb3JlT3B0aW9uczogRmV0Y2hNb3JlUXVlcnlPcHRpb25zPFYsIEs+ICYgRmV0Y2hNb3JlT3B0aW9uczxULCBWPixcbiAgKTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj4ge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LmZldGNoTW9yZShmZXRjaE1vcmVPcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBzdWJzY3JpYmVUb01vcmU8TVQgPSBhbnksIE1WID0gUj4oXG4gICAgb3B0aW9uczogU3Vic2NyaWJlVG9Nb3JlT3B0aW9uczxNVCwgTVY+LFxuICApOiAoKSA9PiB2b2lkIHtcbiAgICAvLyBYWFg6IHRoZXJlJ3MgYSBidWcgaW4gYXBvbGxvLWNsaWVudCB0eXBpbmdzXG4gICAgLy8gaXQgc2hvdWxkIG5vdCBpbmhlcml0IHR5cGVzIGZyb20gT2JzZXJ2YWJsZVF1ZXJ5XG4gICAgcmV0dXJuIHRoaXMub2JzUXVlcnkuc3Vic2NyaWJlVG9Nb3JlKG9wdGlvbnMgYXMgYW55KTtcbiAgfVxuICBwdWJsaWMgdXBkYXRlUXVlcnkoXG4gICAgbWFwRm46IChwcmV2aW91c1F1ZXJ5UmVzdWx0OiBULCBvcHRpb25zOiBVcGRhdGVRdWVyeU9wdGlvbnM8Vj4pID0+IFQsXG4gICk6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnVwZGF0ZVF1ZXJ5KG1hcEZuKTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wUG9sbGluZygpOiB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5zdG9wUG9sbGluZygpO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0UG9sbGluZyhwb2xsSW50ZXJ2YWw6IG51bWJlcik6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnN0YXJ0UG9sbGluZyhwb2xsSW50ZXJ2YWwpO1xuICB9XG5cbiAgcHVibGljIHNldE9wdGlvbnMob3B0czogYW55KTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj4ge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnNldE9wdGlvbnMob3B0cyk7XG4gIH1cblxuICBwdWJsaWMgc2V0VmFyaWFibGVzKFxuICAgIHZhcmlhYmxlczogVixcbiAgICB0cnlGZXRjaDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGZldGNoUmVzdWx0cyA9IHRydWUsXG4gICk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5zZXRWYXJpYWJsZXModmFyaWFibGVzLCB0cnlGZXRjaCwgZmV0Y2hSZXN1bHRzKTtcbiAgfVxufVxuIl19