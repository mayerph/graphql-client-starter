/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { observeOn } from 'rxjs/operators';
import { Observable, queueScheduler, observable, } from 'rxjs';
/**
 * @template T
 * @param {?} promiseFn
 * @return {?}
 */
export function fromPromise(promiseFn) {
    return new Observable(function (subscriber) {
        promiseFn().then(function (result) {
            if (!subscriber.closed) {
                subscriber.next(result);
                subscriber.complete();
            }
        }, function (error) {
            if (!subscriber.closed) {
                subscriber.error(error);
            }
        });
        return function () { return subscriber.unsubscribe(); };
    });
}
var ZoneScheduler = /** @class */ (function () {
    function ZoneScheduler(zone) {
        this.zone = zone;
        this.now = Date.now ? Date.now : function () { return +new Date(); };
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} delay
     * @param {?=} state
     * @return {?}
     */
    ZoneScheduler.prototype.schedule = /**
     * @template T
     * @param {?} work
     * @param {?=} delay
     * @param {?=} state
     * @return {?}
     */
    function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return (/** @type {?} */ (this.zone.run(function () {
            return queueScheduler.schedule(work, delay, state);
        })));
    };
    return ZoneScheduler;
}());
export { ZoneScheduler };
if (false) {
    /** @type {?} */
    ZoneScheduler.prototype.now;
    /** @type {?} */
    ZoneScheduler.prototype.zone;
}
// XXX: Apollo's QueryObservable is not compatible with RxJS
// TODO: remove it in one of future releases
// https://github.com/ReactiveX/rxjs/blob/9fb0ce9e09c865920cf37915cc675e3b3a75050b/src/internal/util/subscribeTo.ts#L32
/**
 * @template T
 * @param {?} obs
 * @return {?}
 */
export function fixObservable(obs) {
    ((/** @type {?} */ (obs)))[observable] = function () { return obs; };
    return obs;
}
/**
 * @template T
 * @param {?} obs
 * @param {?} ngZone
 * @return {?}
 */
export function wrapWithZone(obs, ngZone) {
    return obs.pipe(observeOn(new ZoneScheduler(ngZone)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci8iLCJzb3VyY2VzIjpbInV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUNMLFVBQVUsRUFFVixjQUFjLEVBR2QsVUFBVSxHQUNYLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFFZCxNQUFNLFVBQVUsV0FBVyxDQUFJLFNBQTJCO0lBQ3hELE9BQU8sSUFBSSxVQUFVLENBQUksVUFBQSxVQUFVO1FBQ2pDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FDZCxVQUFBLE1BQU07WUFDSixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQyxFQUNELFVBQUEsS0FBSztZQUNILElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUN0QixVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUNGLENBQUM7UUFFRixPQUFPLGNBQU0sT0FBQSxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQXhCLENBQXdCLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7SUFDRSx1QkFBb0IsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7UUFFekIsUUFBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGNBQU0sT0FBQSxDQUFDLElBQUksSUFBSSxFQUFFLEVBQVgsQ0FBVyxDQUFDO0lBRmxCLENBQUM7Ozs7Ozs7O0lBSTdCLGdDQUFROzs7Ozs7O0lBQWYsVUFDRSxJQUFtRCxFQUNuRCxLQUFpQixFQUNqQixLQUFTO1FBRFQsc0JBQUEsRUFBQSxTQUFpQjtRQUdqQixPQUFPLG1CQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ25CLE9BQUEsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztRQUEzQyxDQUEyQyxDQUM1QyxFQUFnQixDQUFDO0lBQ3BCLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUFkRCxJQWNDOzs7O0lBWEMsNEJBQXFEOztJQUZ6Qyw2QkFBb0I7Ozs7Ozs7Ozs7QUFrQmxDLE1BQU0sVUFBVSxhQUFhLENBQzNCLEdBQTZDO0lBRTdDLENBQUMsbUJBQUEsR0FBRyxFQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxjQUFNLE9BQUEsR0FBRyxFQUFILENBQUcsQ0FBQztJQUNyQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUMxQixHQUFrQixFQUNsQixNQUFjO0lBRWQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZVF1ZXJ5fSBmcm9tICdhcG9sbG8tY2xpZW50JztcbmltcG9ydCB7T2JzZXJ2YWJsZSBhcyBBcG9sbG9PYnNlcnZhYmxlfSBmcm9tICdhcG9sbG8tY2xpZW50L3V0aWwvT2JzZXJ2YWJsZSc7XG5pbXBvcnQge29ic2VydmVPbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgT2JzZXJ2YWJsZSxcbiAgU3Vic2NyaXB0aW9uLFxuICBxdWV1ZVNjaGVkdWxlcixcbiAgU2NoZWR1bGVyTGlrZSxcbiAgU2NoZWR1bGVyQWN0aW9uLFxuICBvYnNlcnZhYmxlLFxufSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Qcm9taXNlPFQ+KHByb21pc2VGbjogKCkgPT4gUHJvbWlzZTxUPik6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGU8VD4oc3Vic2NyaWJlciA9PiB7XG4gICAgcHJvbWlzZUZuKCkudGhlbihcbiAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0KTtcbiAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlcnJvciA9PiB7XG4gICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApO1xuXG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBjbGFzcyBab25lU2NoZWR1bGVyIGltcGxlbWVudHMgU2NoZWR1bGVyTGlrZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgem9uZTogTmdab25lKSB7fVxuXG4gIHB1YmxpYyBub3cgPSBEYXRlLm5vdyA/IERhdGUubm93IDogKCkgPT4gK25ldyBEYXRlKCk7XG5cbiAgcHVibGljIHNjaGVkdWxlPFQ+KFxuICAgIHdvcms6ICh0aGlzOiBTY2hlZHVsZXJBY3Rpb248VD4sIHN0YXRlPzogVCkgPT4gdm9pZCxcbiAgICBkZWxheTogbnVtYmVyID0gMCxcbiAgICBzdGF0ZT86IFQsXG4gICk6IFN1YnNjcmlwdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW4oKCkgPT5cbiAgICAgIHF1ZXVlU2NoZWR1bGVyLnNjaGVkdWxlKHdvcmssIGRlbGF5LCBzdGF0ZSksXG4gICAgKSBhcyBTdWJzY3JpcHRpb247XG4gIH1cbn1cblxuLy8gWFhYOiBBcG9sbG8ncyBRdWVyeU9ic2VydmFibGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBSeEpTXG4vLyBUT0RPOiByZW1vdmUgaXQgaW4gb25lIG9mIGZ1dHVyZSByZWxlYXNlc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzL2Jsb2IvOWZiMGNlOWUwOWM4NjU5MjBjZjM3OTE1Y2M2NzVlM2IzYTc1MDUwYi9zcmMvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUby50cyNMMzJcbmV4cG9ydCBmdW5jdGlvbiBmaXhPYnNlcnZhYmxlPFQ+KFxuICBvYnM6IE9ic2VydmFibGVRdWVyeTxUPiB8IEFwb2xsb09ic2VydmFibGU8VD4sXG4pOiBPYnNlcnZhYmxlUXVlcnk8VD4gfCBBcG9sbG9PYnNlcnZhYmxlPFQ+IHtcbiAgKG9icyBhcyBhbnkpW29ic2VydmFibGVdID0gKCkgPT4gb2JzO1xuICByZXR1cm4gb2JzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFdpdGhab25lPFQ+KFxuICBvYnM6IE9ic2VydmFibGU8VD4sXG4gIG5nWm9uZTogTmdab25lLFxuKTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBvYnMucGlwZShvYnNlcnZlT24obmV3IFpvbmVTY2hlZHVsZXIobmdab25lKSkpO1xufVxuIl19