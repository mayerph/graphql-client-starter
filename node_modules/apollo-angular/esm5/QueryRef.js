/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { from } from 'rxjs';
import { wrapWithZone, fixObservable } from './utils';
/**
 * @template T, V
 */
var /**
 * @template T, V
 */
QueryRef = /** @class */ (function () {
    function QueryRef(obsQuery, ngZone) {
        this.obsQuery = obsQuery;
        this.valueChanges = wrapWithZone(from(fixObservable(this.obsQuery)), ngZone);
        this.queryId = this.obsQuery.queryId;
    }
    // ObservableQuery's methods
    // ObservableQuery's methods
    /**
     * @return {?}
     */
    QueryRef.prototype.result = 
    // ObservableQuery's methods
    /**
     * @return {?}
     */
    function () {
        return this.obsQuery.result();
    };
    /**
     * @return {?}
     */
    QueryRef.prototype.currentResult = /**
     * @return {?}
     */
    function () {
        return this.obsQuery.currentResult();
    };
    /**
     * @return {?}
     */
    QueryRef.prototype.getLastResult = /**
     * @return {?}
     */
    function () {
        return this.obsQuery.getLastResult();
    };
    /**
     * @return {?}
     */
    QueryRef.prototype.getLastError = /**
     * @return {?}
     */
    function () {
        return this.obsQuery.getLastError();
    };
    /**
     * @return {?}
     */
    QueryRef.prototype.resetLastResults = /**
     * @return {?}
     */
    function () {
        return this.obsQuery.resetLastResults();
    };
    /**
     * @param {?=} variables
     * @return {?}
     */
    QueryRef.prototype.refetch = /**
     * @param {?=} variables
     * @return {?}
     */
    function (variables) {
        return this.obsQuery.refetch(variables);
    };
    /**
     * @template K
     * @param {?} fetchMoreOptions
     * @return {?}
     */
    QueryRef.prototype.fetchMore = /**
     * @template K
     * @param {?} fetchMoreOptions
     * @return {?}
     */
    function (fetchMoreOptions) {
        return this.obsQuery.fetchMore(fetchMoreOptions);
    };
    /**
     * @template MT, MV
     * @param {?} options
     * @return {?}
     */
    QueryRef.prototype.subscribeToMore = /**
     * @template MT, MV
     * @param {?} options
     * @return {?}
     */
    function (options) {
        // XXX: there's a bug in apollo-client typings
        // it should not inherit types from ObservableQuery
        return this.obsQuery.subscribeToMore((/** @type {?} */ (options)));
    };
    /**
     * @param {?} mapFn
     * @return {?}
     */
    QueryRef.prototype.updateQuery = /**
     * @param {?} mapFn
     * @return {?}
     */
    function (mapFn) {
        return this.obsQuery.updateQuery(mapFn);
    };
    /**
     * @return {?}
     */
    QueryRef.prototype.stopPolling = /**
     * @return {?}
     */
    function () {
        return this.obsQuery.stopPolling();
    };
    /**
     * @param {?} pollInterval
     * @return {?}
     */
    QueryRef.prototype.startPolling = /**
     * @param {?} pollInterval
     * @return {?}
     */
    function (pollInterval) {
        return this.obsQuery.startPolling(pollInterval);
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    QueryRef.prototype.setOptions = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        return this.obsQuery.setOptions(opts);
    };
    /**
     * @param {?} variables
     * @param {?=} tryFetch
     * @param {?=} fetchResults
     * @return {?}
     */
    QueryRef.prototype.setVariables = /**
     * @param {?} variables
     * @param {?=} tryFetch
     * @param {?=} fetchResults
     * @return {?}
     */
    function (variables, tryFetch, fetchResults) {
        if (tryFetch === void 0) { tryFetch = false; }
        if (fetchResults === void 0) { fetchResults = true; }
        return this.obsQuery.setVariables(variables, tryFetch, fetchResults);
    };
    return QueryRef;
}());
/**
 * @template T, V
 */
export { QueryRef };
if (false) {
    /** @type {?} */
    QueryRef.prototype.valueChanges;
    /** @type {?} */
    QueryRef.prototype.queryId;
    /** @type {?} */
    QueryRef.prototype.obsQuery;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVlcnlSZWYuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci8iLCJzb3VyY2VzIjpbIlF1ZXJ5UmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFXQSxPQUFPLEVBQWEsSUFBSSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRXRDLE9BQU8sRUFBQyxZQUFZLEVBQUUsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDOzs7O0FBR3BEOzs7O0lBSUUsa0JBQW9CLFFBQStCLEVBQUUsTUFBYztRQUEvQyxhQUFRLEdBQVIsUUFBUSxDQUF1QjtRQUNqRCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FDOUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDbEMsTUFBTSxDQUNQLENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCw0QkFBNEI7Ozs7O0lBRXJCLHlCQUFNOzs7OztJQUFiO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFTSxnQ0FBYTs7O0lBQXBCO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFTSxnQ0FBYTs7O0lBQXBCO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFTSwrQkFBWTs7O0lBQW5CO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFTSxtQ0FBZ0I7OztJQUF2QjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFDLENBQUM7Ozs7O0lBRU0sMEJBQU87Ozs7SUFBZCxVQUFlLFNBQWE7UUFDMUIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7Ozs7SUFFTSw0QkFBUzs7Ozs7SUFBaEIsVUFDRSxnQkFBc0U7UUFFdEUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7OztJQUVNLGtDQUFlOzs7OztJQUF0QixVQUNFLE9BQXVDO1FBRXZDLDhDQUE4QztRQUM5QyxtREFBbUQ7UUFDbkQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxtQkFBQSxPQUFPLEVBQU8sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7O0lBQ00sOEJBQVc7Ozs7SUFBbEIsVUFDRSxLQUFvRTtRQUVwRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7SUFFTSw4QkFBVzs7O0lBQWxCO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRU0sK0JBQVk7Ozs7SUFBbkIsVUFBb0IsWUFBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs7OztJQUVNLDZCQUFVOzs7O0lBQWpCLFVBQWtCLElBQVM7UUFDekIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7O0lBRU0sK0JBQVk7Ozs7OztJQUFuQixVQUNFLFNBQVksRUFDWixRQUF5QixFQUN6QixZQUFtQjtRQURuQix5QkFBQSxFQUFBLGdCQUF5QjtRQUN6Qiw2QkFBQSxFQUFBLG1CQUFtQjtRQUVuQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUNILGVBQUM7QUFBRCxDQUFDLEFBNUVELElBNEVDOzs7Ozs7O0lBM0VDLGdDQUFzRDs7SUFDdEQsMkJBQXVCOztJQUVYLDRCQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFwb2xsb1F1ZXJ5UmVzdWx0LFxuICBPYnNlcnZhYmxlUXVlcnksXG4gIEFwb2xsb0Vycm9yLFxuICBGZXRjaE1vcmVRdWVyeU9wdGlvbnMsXG4gIEZldGNoTW9yZU9wdGlvbnMsXG4gIFN1YnNjcmliZVRvTW9yZU9wdGlvbnMsXG4gIFVwZGF0ZVF1ZXJ5T3B0aW9ucyxcbiAgQXBvbGxvQ3VycmVudFJlc3VsdCxcbn0gZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5pbXBvcnQge09ic2VydmFibGUsIGZyb219IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge3dyYXBXaXRoWm9uZSwgZml4T2JzZXJ2YWJsZX0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge1J9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgUXVlcnlSZWY8VCwgViA9IFI+IHtcbiAgcHVibGljIHZhbHVlQ2hhbmdlczogT2JzZXJ2YWJsZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj47XG4gIHB1YmxpYyBxdWVyeUlkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvYnNRdWVyeTogT2JzZXJ2YWJsZVF1ZXJ5PFQsIFY+LCBuZ1pvbmU6IE5nWm9uZSkge1xuICAgIHRoaXMudmFsdWVDaGFuZ2VzID0gd3JhcFdpdGhab25lKFxuICAgICAgZnJvbShmaXhPYnNlcnZhYmxlKHRoaXMub2JzUXVlcnkpKSxcbiAgICAgIG5nWm9uZSxcbiAgICApO1xuICAgIHRoaXMucXVlcnlJZCA9IHRoaXMub2JzUXVlcnkucXVlcnlJZDtcbiAgfVxuXG4gIC8vIE9ic2VydmFibGVRdWVyeSdzIG1ldGhvZHNcblxuICBwdWJsaWMgcmVzdWx0KCk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5yZXN1bHQoKTtcbiAgfVxuXG4gIHB1YmxpYyBjdXJyZW50UmVzdWx0KCk6IEFwb2xsb0N1cnJlbnRSZXN1bHQ8VD4ge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LmN1cnJlbnRSZXN1bHQoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMYXN0UmVzdWx0KCk6IEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+IHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5nZXRMYXN0UmVzdWx0KCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGFzdEVycm9yKCk6IEFwb2xsb0Vycm9yIHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5nZXRMYXN0RXJyb3IoKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldExhc3RSZXN1bHRzKCk6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnJlc2V0TGFzdFJlc3VsdHMoKTtcbiAgfVxuXG4gIHB1YmxpYyByZWZldGNoKHZhcmlhYmxlcz86IFYpOiBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PiB7XG4gICAgcmV0dXJuIHRoaXMub2JzUXVlcnkucmVmZXRjaCh2YXJpYWJsZXMpO1xuICB9XG5cbiAgcHVibGljIGZldGNoTW9yZTxLIGV4dGVuZHMga2V5b2YgVj4oXG4gICAgZmV0Y2hNb3JlT3B0aW9uczogRmV0Y2hNb3JlUXVlcnlPcHRpb25zPFYsIEs+ICYgRmV0Y2hNb3JlT3B0aW9uczxULCBWPixcbiAgKTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj4ge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LmZldGNoTW9yZShmZXRjaE1vcmVPcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBzdWJzY3JpYmVUb01vcmU8TVQgPSBhbnksIE1WID0gUj4oXG4gICAgb3B0aW9uczogU3Vic2NyaWJlVG9Nb3JlT3B0aW9uczxNVCwgTVY+LFxuICApOiAoKSA9PiB2b2lkIHtcbiAgICAvLyBYWFg6IHRoZXJlJ3MgYSBidWcgaW4gYXBvbGxvLWNsaWVudCB0eXBpbmdzXG4gICAgLy8gaXQgc2hvdWxkIG5vdCBpbmhlcml0IHR5cGVzIGZyb20gT2JzZXJ2YWJsZVF1ZXJ5XG4gICAgcmV0dXJuIHRoaXMub2JzUXVlcnkuc3Vic2NyaWJlVG9Nb3JlKG9wdGlvbnMgYXMgYW55KTtcbiAgfVxuICBwdWJsaWMgdXBkYXRlUXVlcnkoXG4gICAgbWFwRm46IChwcmV2aW91c1F1ZXJ5UmVzdWx0OiBULCBvcHRpb25zOiBVcGRhdGVRdWVyeU9wdGlvbnM8Vj4pID0+IFQsXG4gICk6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnVwZGF0ZVF1ZXJ5KG1hcEZuKTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wUG9sbGluZygpOiB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5zdG9wUG9sbGluZygpO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0UG9sbGluZyhwb2xsSW50ZXJ2YWw6IG51bWJlcik6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnN0YXJ0UG9sbGluZyhwb2xsSW50ZXJ2YWwpO1xuICB9XG5cbiAgcHVibGljIHNldE9wdGlvbnMob3B0czogYW55KTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj4ge1xuICAgIHJldHVybiB0aGlzLm9ic1F1ZXJ5LnNldE9wdGlvbnMob3B0cyk7XG4gIH1cblxuICBwdWJsaWMgc2V0VmFyaWFibGVzKFxuICAgIHZhcmlhYmxlczogVixcbiAgICB0cnlGZXRjaDogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGZldGNoUmVzdWx0cyA9IHRydWUsXG4gICk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5vYnNRdWVyeS5zZXRWYXJpYWJsZXModmFyaWFibGVzLCB0cnlGZXRjaCwgZmV0Y2hSZXN1bHRzKTtcbiAgfVxufVxuIl19