/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject, NgZone } from '@angular/core';
import { ApolloClient, } from 'apollo-client';
import { from } from 'rxjs';
import { QueryRef } from './QueryRef';
import { APOLLO_OPTIONS } from './tokens';
import { fromPromise, wrapWithZone, fixObservable } from './utils';
/**
 * @template TCacheShape
 */
var /**
 * @template TCacheShape
 */
ApolloBase = /** @class */ (function () {
    function ApolloBase(ngZone, _client) {
        this.ngZone = ngZone;
        this._client = _client;
    }
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    ApolloBase.prototype.watchQuery = /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new QueryRef((/** @type {?} */ (this.client.watchQuery(tslib_1.__assign({}, options)))), this.ngZone);
    };
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    ApolloBase.prototype.query = /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        return fromPromise(function () {
            return _this.client.query(tslib_1.__assign({}, options));
        });
    };
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    ApolloBase.prototype.mutate = /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        return fromPromise(function () {
            return _this.client.mutate(tslib_1.__assign({}, options));
        });
    };
    /**
     * @template T, V
     * @param {?} options
     * @param {?=} extra
     * @return {?}
     */
    ApolloBase.prototype.subscribe = /**
     * @template T, V
     * @param {?} options
     * @param {?=} extra
     * @return {?}
     */
    function (options, extra) {
        /** @type {?} */
        var obs = from(fixObservable(this.client.subscribe(tslib_1.__assign({}, options))));
        return extra && extra.useZone !== true
            ? obs
            : wrapWithZone(obs, this.ngZone);
    };
    /**
     * @return {?}
     */
    ApolloBase.prototype.getClient = /**
     * @return {?}
     */
    function () {
        return this._client;
    };
    /**
     * @param {?} client
     * @return {?}
     */
    ApolloBase.prototype.setClient = /**
     * @param {?} client
     * @return {?}
     */
    function (client) {
        if (this._client) {
            throw new Error('Client has been already defined');
        }
        this._client = client;
    };
    Object.defineProperty(ApolloBase.prototype, "client", {
        get: /**
         * @return {?}
         */
        function () {
            this.beforeEach();
            return this._client;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ApolloBase.prototype.beforeEach = /**
     * @return {?}
     */
    function () {
        this.checkInstance();
    };
    /**
     * @return {?}
     */
    ApolloBase.prototype.checkInstance = /**
     * @return {?}
     */
    function () {
        if (!this._client) {
            throw new Error('Client has not been defined yet');
        }
    };
    return ApolloBase;
}());
/**
 * @template TCacheShape
 */
export { ApolloBase };
if (false) {
    /** @type {?} */
    ApolloBase.prototype.ngZone;
    /** @type {?} */
    ApolloBase.prototype._client;
}
var Apollo = /** @class */ (function (_super) {
    tslib_1.__extends(Apollo, _super);
    function Apollo(_ngZone, apolloOptions) {
        var _this = _super.call(this, _ngZone) || this;
        _this._ngZone = _ngZone;
        _this.map = new Map();
        if (apolloOptions) {
            _this.createDefault(apolloOptions);
        }
        return _this;
    }
    /**
     * @template TCacheShape
     * @param {?} options
     * @param {?=} name
     * @return {?}
     */
    Apollo.prototype.create = /**
     * @template TCacheShape
     * @param {?} options
     * @param {?=} name
     * @return {?}
     */
    function (options, name) {
        if (name && name !== 'default') {
            this.createNamed(name, options);
        }
        else {
            this.createDefault(options);
        }
    };
    /**
     * @return {?}
     */
    Apollo.prototype.default = /**
     * @return {?}
     */
    function () {
        return this;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Apollo.prototype.use = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (name === 'default') {
            return this.default();
        }
        return this.map.get(name);
    };
    /**
     * @template TCacheShape
     * @param {?} options
     * @return {?}
     */
    Apollo.prototype.createDefault = /**
     * @template TCacheShape
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (this.getClient()) {
            throw new Error('Apollo has been already created.');
        }
        return this.setClient(new ApolloClient(options));
    };
    /**
     * @template TCacheShape
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    Apollo.prototype.createNamed = /**
     * @template TCacheShape
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    function (name, options) {
        if (this.map.has(name)) {
            throw new Error("Client " + name + " has been already created");
        }
        this.map.set(name, new ApolloBase(this._ngZone, new ApolloClient(options)));
    };
    Apollo.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Apollo.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_OPTIONS,] }] }
    ]; };
    return Apollo;
}(ApolloBase));
export { Apollo };
if (false) {
    /** @type {?} */
    Apollo.prototype.map;
    /** @type {?} */
    Apollo.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,