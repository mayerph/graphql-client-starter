/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Controller to be injected into tests, that allows for mocking and flushing
 * of operations.
 *
 *
 * @abstract
 */
var /**
 * Controller to be injected into tests, that allows for mocking and flushing
 * of operations.
 *
 *
 * @abstract
 */
ApolloTestingController = /** @class */ (function () {
    function ApolloTestingController() {
    }
    return ApolloTestingController;
}());
/**
 * Controller to be injected into tests, that allows for mocking and flushing
 * of operations.
 *
 *
 * @abstract
 */
export { ApolloTestingController };
if (false) {
    /**
     * Search for operations that match the given parameter, without any expectations.
     * @abstract
     * @param {?} match
     * @return {?}
     */
    ApolloTestingController.prototype.match = function (match) { };
    /**
     * Expect that a single  has been made which matches the given URL, and return its
     * mock.
     *
     * If no such  has been made, or more than one such  has been made, fail with an
     * error message including the given  description, if any.
     * @abstract
     * @param {?} operationName
     * @param {?=} description
     * @return {?}
     */
    ApolloTestingController.prototype.expectOne = function (operationName, description) { };
    /**
     * Expect that a single  has been made which matches the given parameters, and return
     * its mock.
     *
     * If no such  has been made, or more than one such  has been made, fail with an
     * error message including the given  description, if any.
     * @abstract
     * @param {?} op
     * @param {?=} description
     * @return {?}
     */
    ApolloTestingController.prototype.expectOne = function (op, description) { };
    /**
     * Expect that a single  has been made which matches the given predicate function, and
     * return its mock.
     *
     * If no such  has been made, or more than one such  has been made, fail with an
     * error message including the given  description, if any.
     * @abstract
     * @param {?} matchFn
     * @param {?=} description
     * @return {?}
     */
    ApolloTestingController.prototype.expectOne = function (matchFn, description) { };
    /**
     * Expect that a single  has been made which matches the given condition, and return
     * its mock.
     *
     * If no such  has been made, or more than one such  has been made, fail with an
     * error message including the given  description, if any.
     * @abstract
     * @param {?} match
     * @param {?=} description
     * @return {?}
     */
    ApolloTestingController.prototype.expectOne = function (match, description) { };
    /**
     * Expect that no operations have been made which match the given URL.
     *
     * If a matching  has been made, fail with an error message including the given
     * description, if any.
     * @abstract
     * @param {?} operationName
     * @param {?=} description
     * @return {?}
     */
    ApolloTestingController.prototype.expectNone = function (operationName, description) { };
    /**
     * Expect that no operations have been made which match the given parameters.
     *
     * If a matching  has been made, fail with an error message including the given
     * description, if any.
     * @abstract
     * @param {?} op
     * @param {?=} description
     * @return {?}
     */
    ApolloTestingController.prototype.expectNone = function (op, description) { };
    /**
     * Expect that no operations have been made which match the given predicate function.
     *
     * If a matching  has been made, fail with an error message including the given
     * description, if any.
     * @abstract
     * @param {?} matchFn
     * @param {?=} description
     * @return {?}
     */
    ApolloTestingController.prototype.expectNone = function (matchFn, description) { };
    /**
     * Expect that no operations have been made which match the given condition.
     *
     * If a matching  has been made, fail with an error message including the given
     * description, if any.
     * @abstract
     * @param {?} match
     * @param {?=} description
     * @return {?}
     */
    ApolloTestingController.prototype.expectNone = function (match, description) { };
    /**
     * Verify that no unmatched operations are outstanding.
     *
     * If any operations are outstanding, fail with an error message indicating which operations were not
     * handled.
     * @abstract
     * @return {?}
     */
    ApolloTestingController.prototype.verify = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2Fwb2xsby1hbmd1bGFyL3Rlc3RpbmcvIiwic291cmNlcyI6WyJjb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBa0JBOzs7Ozs7OztJQUFBO0lBNkZBLENBQUM7SUFBRCw4QkFBQztBQUFELENBQUMsQUE3RkQsSUE2RkM7Ozs7Ozs7Ozs7Ozs7Ozs7SUF6RkMsK0RBQThEOzs7Ozs7Ozs7Ozs7SUFTOUQsd0ZBR2lCOzs7Ozs7Ozs7Ozs7SUFTakIsNkVBQThFOzs7Ozs7Ozs7Ozs7SUFTOUUsa0ZBR2lCOzs7Ozs7Ozs7Ozs7SUFTakIsZ0ZBR2lCOzs7Ozs7Ozs7OztJQVFqQix5RkFBOEU7Ozs7Ozs7Ozs7O0lBUTlFLDhFQUFzRTs7Ozs7Ozs7Ozs7SUFRdEUsbUZBR1E7Ozs7Ozs7Ozs7O0lBUVIsaUZBQThFOzs7Ozs7Ozs7SUFROUUsMkRBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJ2Fwb2xsby1saW5rJztcbmltcG9ydCB7RG9jdW1lbnROb2RlfSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHtUZXN0T3BlcmF0aW9ufSBmcm9tICcuL29wZXJhdGlvbic7XG5cbmV4cG9ydCB0eXBlIE1hdGNoT3BlcmF0aW9uRm4gPSAob3A6IE9wZXJhdGlvbikgPT4gYm9vbGVhbjtcbmV4cG9ydCB0eXBlIE1hdGNoT3BlcmF0aW9uID1cbiAgfCBzdHJpbmdcbiAgfCBEb2N1bWVudE5vZGVcbiAgfCBPcGVyYXRpb25cbiAgfCBNYXRjaE9wZXJhdGlvbkZuO1xuXG4vKipcbiAqIENvbnRyb2xsZXIgdG8gYmUgaW5qZWN0ZWQgaW50byB0ZXN0cywgdGhhdCBhbGxvd3MgZm9yIG1vY2tpbmcgYW5kIGZsdXNoaW5nXG4gKiBvZiBvcGVyYXRpb25zLlxuICpcbiAqXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBcG9sbG9UZXN0aW5nQ29udHJvbGxlciB7XG4gIC8qKlxuICAgKiBTZWFyY2ggZm9yIG9wZXJhdGlvbnMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gcGFyYW1ldGVyLCB3aXRob3V0IGFueSBleHBlY3RhdGlvbnMuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgbWF0Y2gobWF0Y2g6IE1hdGNoT3BlcmF0aW9uKTogVGVzdE9wZXJhdGlvbltdO1xuXG4gIC8qKlxuICAgKiBFeHBlY3QgdGhhdCBhIHNpbmdsZSAgaGFzIGJlZW4gbWFkZSB3aGljaCBtYXRjaGVzIHRoZSBnaXZlbiBVUkwsIGFuZCByZXR1cm4gaXRzXG4gICAqIG1vY2suXG4gICAqXG4gICAqIElmIG5vIHN1Y2ggIGhhcyBiZWVuIG1hZGUsIG9yIG1vcmUgdGhhbiBvbmUgc3VjaCAgaGFzIGJlZW4gbWFkZSwgZmFpbCB3aXRoIGFuXG4gICAqIGVycm9yIG1lc3NhZ2UgaW5jbHVkaW5nIHRoZSBnaXZlbiAgZGVzY3JpcHRpb24sIGlmIGFueS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBleHBlY3RPbmUoXG4gICAgb3BlcmF0aW9uTmFtZTogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nLFxuICApOiBUZXN0T3BlcmF0aW9uO1xuXG4gIC8qKlxuICAgKiBFeHBlY3QgdGhhdCBhIHNpbmdsZSAgaGFzIGJlZW4gbWFkZSB3aGljaCBtYXRjaGVzIHRoZSBnaXZlbiBwYXJhbWV0ZXJzLCBhbmQgcmV0dXJuXG4gICAqIGl0cyBtb2NrLlxuICAgKlxuICAgKiBJZiBubyBzdWNoICBoYXMgYmVlbiBtYWRlLCBvciBtb3JlIHRoYW4gb25lIHN1Y2ggIGhhcyBiZWVuIG1hZGUsIGZhaWwgd2l0aCBhblxuICAgKiBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZ2l2ZW4gIGRlc2NyaXB0aW9uLCBpZiBhbnkuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZXhwZWN0T25lKG9wOiBPcGVyYXRpb24sIGRlc2NyaXB0aW9uPzogc3RyaW5nKTogVGVzdE9wZXJhdGlvbjtcblxuICAvKipcbiAgICogRXhwZWN0IHRoYXQgYSBzaW5nbGUgIGhhcyBiZWVuIG1hZGUgd2hpY2ggbWF0Y2hlcyB0aGUgZ2l2ZW4gcHJlZGljYXRlIGZ1bmN0aW9uLCBhbmRcbiAgICogcmV0dXJuIGl0cyBtb2NrLlxuICAgKlxuICAgKiBJZiBubyBzdWNoICBoYXMgYmVlbiBtYWRlLCBvciBtb3JlIHRoYW4gb25lIHN1Y2ggIGhhcyBiZWVuIG1hZGUsIGZhaWwgd2l0aCBhblxuICAgKiBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZ2l2ZW4gIGRlc2NyaXB0aW9uLCBpZiBhbnkuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZXhwZWN0T25lKFxuICAgIG1hdGNoRm46IE1hdGNoT3BlcmF0aW9uRm4sXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmcsXG4gICk6IFRlc3RPcGVyYXRpb247XG5cbiAgLyoqXG4gICAqIEV4cGVjdCB0aGF0IGEgc2luZ2xlICBoYXMgYmVlbiBtYWRlIHdoaWNoIG1hdGNoZXMgdGhlIGdpdmVuIGNvbmRpdGlvbiwgYW5kIHJldHVyblxuICAgKiBpdHMgbW9jay5cbiAgICpcbiAgICogSWYgbm8gc3VjaCAgaGFzIGJlZW4gbWFkZSwgb3IgbW9yZSB0aGFuIG9uZSBzdWNoICBoYXMgYmVlbiBtYWRlLCBmYWlsIHdpdGggYW5cbiAgICogZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGdpdmVuICBkZXNjcmlwdGlvbiwgaWYgYW55LlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGV4cGVjdE9uZShcbiAgICBtYXRjaDogTWF0Y2hPcGVyYXRpb24sXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmcsXG4gICk6IFRlc3RPcGVyYXRpb247XG5cbiAgLyoqXG4gICAqIEV4cGVjdCB0aGF0IG5vIG9wZXJhdGlvbnMgaGF2ZSBiZWVuIG1hZGUgd2hpY2ggbWF0Y2ggdGhlIGdpdmVuIFVSTC5cbiAgICpcbiAgICogSWYgYSBtYXRjaGluZyAgaGFzIGJlZW4gbWFkZSwgZmFpbCB3aXRoIGFuIGVycm9yIG1lc3NhZ2UgaW5jbHVkaW5nIHRoZSBnaXZlblxuICAgKiBkZXNjcmlwdGlvbiwgaWYgYW55LlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGV4cGVjdE5vbmUob3BlcmF0aW9uTmFtZTogc3RyaW5nLCBkZXNjcmlwdGlvbj86IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEV4cGVjdCB0aGF0IG5vIG9wZXJhdGlvbnMgaGF2ZSBiZWVuIG1hZGUgd2hpY2ggbWF0Y2ggdGhlIGdpdmVuIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIElmIGEgbWF0Y2hpbmcgIGhhcyBiZWVuIG1hZGUsIGZhaWwgd2l0aCBhbiBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZ2l2ZW5cbiAgICogZGVzY3JpcHRpb24sIGlmIGFueS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBleHBlY3ROb25lKG9wOiBPcGVyYXRpb24sIGRlc2NyaXB0aW9uPzogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogRXhwZWN0IHRoYXQgbm8gb3BlcmF0aW9ucyBoYXZlIGJlZW4gbWFkZSB3aGljaCBtYXRjaCB0aGUgZ2l2ZW4gcHJlZGljYXRlIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBJZiBhIG1hdGNoaW5nICBoYXMgYmVlbiBtYWRlLCBmYWlsIHdpdGggYW4gZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGdpdmVuXG4gICAqIGRlc2NyaXB0aW9uLCBpZiBhbnkuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZXhwZWN0Tm9uZShcbiAgICBtYXRjaEZuOiBNYXRjaE9wZXJhdGlvbkZuLFxuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nLFxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBFeHBlY3QgdGhhdCBubyBvcGVyYXRpb25zIGhhdmUgYmVlbiBtYWRlIHdoaWNoIG1hdGNoIHRoZSBnaXZlbiBjb25kaXRpb24uXG4gICAqXG4gICAqIElmIGEgbWF0Y2hpbmcgIGhhcyBiZWVuIG1hZGUsIGZhaWwgd2l0aCBhbiBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZ2l2ZW5cbiAgICogZGVzY3JpcHRpb24sIGlmIGFueS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBleHBlY3ROb25lKG1hdGNoOiBNYXRjaE9wZXJhdGlvbiwgZGVzY3JpcHRpb24/OiBzdHJpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBWZXJpZnkgdGhhdCBubyB1bm1hdGNoZWQgb3BlcmF0aW9ucyBhcmUgb3V0c3RhbmRpbmcuXG4gICAqXG4gICAqIElmIGFueSBvcGVyYXRpb25zIGFyZSBvdXRzdGFuZGluZywgZmFpbCB3aXRoIGFuIGVycm9yIG1lc3NhZ2UgaW5kaWNhdGluZyB3aGljaCBvcGVyYXRpb25zIHdlcmUgbm90XG4gICAqIGhhbmRsZWQuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgdmVyaWZ5KCk6IHZvaWQ7XG59XG4iXX0=