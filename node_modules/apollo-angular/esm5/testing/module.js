/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ApolloModule, Apollo } from 'apollo-angular';
import { ApolloLink } from 'apollo-link';
import { InMemoryCache } from 'apollo-cache-inmemory';
import { ApolloCache } from 'apollo-cache';
import { NgModule, InjectionToken, Inject, Optional } from '@angular/core';
import { ApolloTestingController } from './controller';
import { ApolloTestingBackend } from './backend';
/** @type {?} */
export var APOLLO_TESTING_CACHE = new InjectionToken('apollo-angular/testing cache');
var ApolloTestingModule = /** @class */ (function () {
    function ApolloTestingModule(apollo, backend, cache) {
        apollo.create({
            link: new ApolloLink(function (operation) { return backend.handle(operation); }),
            cache: cache ||
                new InMemoryCache({
                    addTypename: false,
                }),
        });
    }
    ApolloTestingModule.decorators = [
        { type: NgModule, args: [{
                    imports: [ApolloModule],
                    providers: [
                        ApolloTestingBackend,
                        { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
                    ],
                },] }
    ];
    /** @nocollapse */
    ApolloTestingModule.ctorParameters = function () { return [
        { type: Apollo },
        { type: ApolloTestingBackend },
        { type: ApolloCache, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CACHE,] }] }
    ]; };
    return ApolloTestingModule;
}());
export { ApolloTestingModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXBvbGxvLWFuZ3VsYXIvdGVzdGluZy8iLCJzb3VyY2VzIjpbIm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxRQUFRLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3JELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7QUFFL0MsTUFBTSxLQUFPLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUNwRCw4QkFBOEIsQ0FDL0I7QUFFRDtJQVFFLDZCQUNFLE1BQWMsRUFDZCxPQUE2QixFQUc3QixLQUF3QjtRQUV4QixNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ1osSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBekIsQ0FBeUIsQ0FBQztZQUM1RCxLQUFLLEVBQ0gsS0FBSztnQkFDTCxJQUFJLGFBQWEsQ0FBQztvQkFDaEIsV0FBVyxFQUFFLEtBQUs7aUJBQ25CLENBQUM7U0FDTCxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkF2QkYsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztvQkFDdkIsU0FBUyxFQUFFO3dCQUNULG9CQUFvQjt3QkFDcEIsRUFBQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFDO3FCQUN0RTtpQkFDRjs7OztnQkFuQnFCLE1BQU07Z0JBT3BCLG9CQUFvQjtnQkFKcEIsV0FBVyx1QkFxQmQsUUFBUSxZQUNSLE1BQU0sU0FBQyxvQkFBb0I7O0lBWWhDLDBCQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0FqQlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcG9sbG9Nb2R1bGUsIEFwb2xsb30gZnJvbSAnYXBvbGxvLWFuZ3VsYXInO1xuaW1wb3J0IHtBcG9sbG9MaW5rfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQge0luTWVtb3J5Q2FjaGV9IGZyb20gJ2Fwb2xsby1jYWNoZS1pbm1lbW9yeSc7XG5pbXBvcnQge0Fwb2xsb0NhY2hlfSBmcm9tICdhcG9sbG8tY2FjaGUnO1xuaW1wb3J0IHtOZ01vZHVsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdCwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0Fwb2xsb1Rlc3RpbmdDb250cm9sbGVyfSBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHtBcG9sbG9UZXN0aW5nQmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kJztcblxuZXhwb3J0IGNvbnN0IEFQT0xMT19URVNUSU5HX0NBQ0hFID0gbmV3IEluamVjdGlvblRva2VuPEFwb2xsb0NhY2hlPGFueT4+KFxuICAnYXBvbGxvLWFuZ3VsYXIvdGVzdGluZyBjYWNoZScsXG4pO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQXBvbGxvTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgQXBvbGxvVGVzdGluZ0JhY2tlbmQsXG4gICAge3Byb3ZpZGU6IEFwb2xsb1Rlc3RpbmdDb250cm9sbGVyLCB1c2VFeGlzdGluZzogQXBvbGxvVGVzdGluZ0JhY2tlbmR9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBBcG9sbG9UZXN0aW5nTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgYXBvbGxvOiBBcG9sbG8sXG4gICAgYmFja2VuZDogQXBvbGxvVGVzdGluZ0JhY2tlbmQsXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEFQT0xMT19URVNUSU5HX0NBQ0hFKVxuICAgIGNhY2hlPzogQXBvbGxvQ2FjaGU8YW55PixcbiAgKSB7XG4gICAgYXBvbGxvLmNyZWF0ZSh7XG4gICAgICBsaW5rOiBuZXcgQXBvbGxvTGluayhvcGVyYXRpb24gPT4gYmFja2VuZC5oYW5kbGUob3BlcmF0aW9uKSksXG4gICAgICBjYWNoZTpcbiAgICAgICAgY2FjaGUgfHxcbiAgICAgICAgbmV3IEluTWVtb3J5Q2FjaGUoe1xuICAgICAgICAgIGFkZFR5cGVuYW1lOiBmYWxzZSxcbiAgICAgICAgfSksXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==