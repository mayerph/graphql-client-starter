{"version":3,"file":"ng.apollo.js.map","sources":["ng://apollo-angular/utils.ts","ng://apollo-angular/QueryRef.ts","ng://apollo-angular/tokens.ts","ng://apollo-angular/Apollo.ts","ng://apollo-angular/Query.ts","ng://apollo-angular/Mutation.ts","ng://apollo-angular/Subscription.ts","ng://apollo-angular/SelectPipe.ts","ng://apollo-angular/ApolloModule.ts"],"sourcesContent":["import {NgZone} from '@angular/core';\nimport {ObservableQuery} from 'apollo-client';\nimport {Observable as ApolloObservable} from 'apollo-client/util/Observable';\nimport {observeOn} from 'rxjs/operators';\nimport {\n  Observable,\n  Subscription,\n  queueScheduler,\n  SchedulerLike,\n  SchedulerAction,\n  observable,\n} from 'rxjs';\n\nexport function fromPromise<T>(promiseFn: () => Promise<T>): Observable<T> {\n  return new Observable<T>(subscriber => {\n    promiseFn().then(\n      result => {\n        if (!subscriber.closed) {\n          subscriber.next(result);\n          subscriber.complete();\n        }\n      },\n      error => {\n        if (!subscriber.closed) {\n          subscriber.error(error);\n        }\n      },\n    );\n\n    return () => subscriber.unsubscribe();\n  });\n}\n\nexport class ZoneScheduler implements SchedulerLike {\n  constructor(private zone: NgZone) {}\n\n  public now = Date.now ? Date.now : () => +new Date();\n\n  public schedule<T>(\n    work: (this: SchedulerAction<T>, state?: T) => void,\n    delay: number = 0,\n    state?: T,\n  ): Subscription {\n    return this.zone.run(() =>\n      queueScheduler.schedule(work, delay, state),\n    ) as Subscription;\n  }\n}\n\n// XXX: Apollo's QueryObservable is not compatible with RxJS\n// TODO: remove it in one of future releases\n// https://github.com/ReactiveX/rxjs/blob/9fb0ce9e09c865920cf37915cc675e3b3a75050b/src/internal/util/subscribeTo.ts#L32\nexport function fixObservable<T>(\n  obs: ObservableQuery<T> | ApolloObservable<T>,\n): ObservableQuery<T> | ApolloObservable<T> {\n  (obs as any)[observable] = () => obs;\n  return obs;\n}\n\nexport function wrapWithZone<T>(\n  obs: Observable<T>,\n  ngZone: NgZone,\n): Observable<T> {\n  return obs.pipe(observeOn(new ZoneScheduler(ngZone)));\n}\n","import {NgZone} from '@angular/core';\nimport {\n  ApolloQueryResult,\n  ObservableQuery,\n  ApolloError,\n  FetchMoreQueryOptions,\n  FetchMoreOptions,\n  SubscribeToMoreOptions,\n  UpdateQueryOptions,\n  ApolloCurrentResult,\n} from 'apollo-client';\nimport {Observable, from} from 'rxjs';\n\nimport {wrapWithZone, fixObservable} from './utils';\nimport {R} from './types';\n\nexport class QueryRef<T, V = R> {\n  public valueChanges: Observable<ApolloQueryResult<T>>;\n  public queryId: string;\n\n  constructor(private obsQuery: ObservableQuery<T, V>, ngZone: NgZone) {\n    this.valueChanges = wrapWithZone(\n      from(fixObservable(this.obsQuery)),\n      ngZone,\n    );\n    this.queryId = this.obsQuery.queryId;\n  }\n\n  // ObservableQuery's methods\n\n  public result(): Promise<ApolloQueryResult<T>> {\n    return this.obsQuery.result();\n  }\n\n  public currentResult(): ApolloCurrentResult<T> {\n    return this.obsQuery.currentResult();\n  }\n\n  public getLastResult(): ApolloQueryResult<T> {\n    return this.obsQuery.getLastResult();\n  }\n\n  public getLastError(): ApolloError {\n    return this.obsQuery.getLastError();\n  }\n\n  public resetLastResults(): void {\n    return this.obsQuery.resetLastResults();\n  }\n\n  public refetch(variables?: V): Promise<ApolloQueryResult<T>> {\n    return this.obsQuery.refetch(variables);\n  }\n\n  public fetchMore<K extends keyof V>(\n    fetchMoreOptions: FetchMoreQueryOptions<V, K> & FetchMoreOptions<T, V>,\n  ): Promise<ApolloQueryResult<T>> {\n    return this.obsQuery.fetchMore(fetchMoreOptions);\n  }\n\n  public subscribeToMore<MT = any, MV = R>(\n    options: SubscribeToMoreOptions<MT, MV>,\n  ): () => void {\n    // XXX: there's a bug in apollo-client typings\n    // it should not inherit types from ObservableQuery\n    return this.obsQuery.subscribeToMore(options as any);\n  }\n  public updateQuery(\n    mapFn: (previousQueryResult: T, options: UpdateQueryOptions<V>) => T,\n  ): void {\n    return this.obsQuery.updateQuery(mapFn);\n  }\n\n  public stopPolling(): void {\n    return this.obsQuery.stopPolling();\n  }\n\n  public startPolling(pollInterval: number): void {\n    return this.obsQuery.startPolling(pollInterval);\n  }\n\n  public setOptions(opts: any): Promise<ApolloQueryResult<T>> {\n    return this.obsQuery.setOptions(opts);\n  }\n\n  public setVariables(\n    variables: V,\n    tryFetch: boolean = false,\n    fetchResults = true,\n  ): Promise<ApolloQueryResult<T>> {\n    return this.obsQuery.setVariables(variables, tryFetch, fetchResults);\n  }\n}\n","import {InjectionToken} from '@angular/core';\nimport {ApolloClientOptions} from 'apollo-client';\n\nexport const APOLLO_OPTIONS = new InjectionToken<ApolloClientOptions<any>>(\n  '[apollo-angular] options',\n);\n","import {Injectable, Optional, Inject, NgZone} from '@angular/core';\nimport {\n  ApolloClient,\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  ApolloQueryResult,\n  SubscriptionOptions,\n  ApolloClientOptions,\n  ObservableQuery,\n} from 'apollo-client';\nimport {FetchResult} from 'apollo-link';\nimport {Observable, from} from 'rxjs';\n\nimport {QueryRef} from './QueryRef';\nimport {ExtraSubscriptionOptions, R} from './types';\nimport {APOLLO_OPTIONS} from './tokens';\nimport {fromPromise, wrapWithZone, fixObservable} from './utils';\n\nexport class ApolloBase<TCacheShape = any> {\n  constructor(\n    private ngZone: NgZone,\n    private _client?: ApolloClient<TCacheShape>,\n  ) {}\n\n  public watchQuery<T, V = R>(options: WatchQueryOptions<V>): QueryRef<T, V> {\n    return new QueryRef<T, V>(\n      this.client.watchQuery<T, V>({...options}) as ObservableQuery<T, V>,\n      this.ngZone,\n    );\n  }\n\n  public query<T, V = R>(\n    options: QueryOptions<V>,\n  ): Observable<ApolloQueryResult<T>> {\n    return fromPromise<ApolloQueryResult<T>>(() =>\n      this.client.query<T, V>({...options}),\n    );\n  }\n\n  public mutate<T, V = R>(\n    options: MutationOptions<T, V>,\n  ): Observable<FetchResult<T>> {\n    return fromPromise<FetchResult<T>>(() =>\n      this.client.mutate<T, V>({...options}),\n    );\n  }\n\n  public subscribe<T, V = R>(\n    options: SubscriptionOptions<V>,\n    extra?: ExtraSubscriptionOptions,\n  ): Observable<any> {\n    const obs = from(fixObservable(this.client.subscribe<T, V>({...options})));\n\n    return extra && extra.useZone !== true\n      ? obs\n      : wrapWithZone(obs, this.ngZone);\n  }\n\n  public getClient() {\n    return this._client;\n  }\n\n  public setClient(client: ApolloClient<TCacheShape>) {\n    if (this._client) {\n      throw new Error('Client has been already defined');\n    }\n\n    this._client = client;\n  }\n\n  private get client(): ApolloClient<TCacheShape> {\n    this.beforeEach();\n\n    return this._client;\n  }\n\n  private beforeEach(): void {\n    this.checkInstance();\n  }\n\n  private checkInstance(): void {\n    if (!this._client) {\n      throw new Error('Client has not been defined yet');\n    }\n  }\n}\n\n@Injectable()\nexport class Apollo extends ApolloBase<any> {\n  private map: Map<string, ApolloBase<any>> = new Map<\n    string,\n    ApolloBase<any>\n  >();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Optional()\n    @Inject(APOLLO_OPTIONS)\n    apolloOptions?: ApolloClientOptions<any>,\n  ) {\n    super(_ngZone);\n\n    if (apolloOptions) {\n      this.createDefault(apolloOptions);\n    }\n  }\n\n  public create<TCacheShape>(\n    options: ApolloClientOptions<TCacheShape>,\n    name?: string,\n  ): void {\n    if (name && name !== 'default') {\n      this.createNamed<TCacheShape>(name, options);\n    } else {\n      this.createDefault<TCacheShape>(options);\n    }\n  }\n\n  public default(): ApolloBase<any> {\n    return this;\n  }\n\n  public use(name: string): ApolloBase<any> {\n    if (name === 'default') {\n      return this.default();\n    }\n    return this.map.get(name);\n  }\n\n  public createDefault<TCacheShape>(\n    options: ApolloClientOptions<TCacheShape>,\n  ): void {\n    if (this.getClient()) {\n      throw new Error('Apollo has been already created.');\n    }\n\n    return this.setClient(new ApolloClient<TCacheShape>(options));\n  }\n\n  public createNamed<TCacheShape>(\n    name: string,\n    options: ApolloClientOptions<TCacheShape>,\n  ): void {\n    if (this.map.has(name)) {\n      throw new Error(`Client ${name} has been already created`);\n    }\n    this.map.set(\n      name,\n      new ApolloBase(this._ngZone, new ApolloClient<TCacheShape>(options)),\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {DocumentNode} from 'graphql';\nimport {ApolloQueryResult} from 'apollo-client';\nimport {Observable} from 'rxjs';\n\nimport {Apollo} from './Apollo';\nimport {QueryRef} from './QueryRef';\nimport {WatchQueryOptions, QueryOptions, R} from './types';\n\n@Injectable()\nexport class Query<T = {}, V = R> {\n  public readonly document: DocumentNode;\n  public client = 'default';\n\n  constructor(protected apollo: Apollo) {}\n\n  public watch(variables?: V, options?: WatchQueryOptions<V>): QueryRef<T, V> {\n    return this.apollo.use(this.client).watchQuery<T, V>({\n      ...options,\n      variables,\n      query: this.document,\n    });\n  }\n\n  public fetch(\n    variables?: V,\n    options?: QueryOptions<V>,\n  ): Observable<ApolloQueryResult<T>> {\n    return this.apollo.use(this.client).query<T, V>({\n      ...options,\n      variables,\n      query: this.document,\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {DocumentNode} from 'graphql';\nimport {Observable} from 'rxjs';\nimport {FetchResult} from 'apollo-link';\n\nimport {Apollo} from './Apollo';\nimport {MutationOptions, R} from './types';\n\n@Injectable()\nexport class Mutation<T = {}, V = R> {\n  public readonly document: DocumentNode;\n  public client = 'default';\n\n  constructor(protected apollo: Apollo) {}\n\n  public mutate(\n    variables?: V,\n    options?: MutationOptions<T, V>,\n  ): Observable<FetchResult<T>> {\n    return this.apollo.use(this.client).mutate<T, V>({\n      ...options,\n      variables,\n      mutation: this.document,\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {DocumentNode} from 'graphql';\nimport {Observable} from 'rxjs';\n\nimport {Apollo} from './Apollo';\nimport {\n  SubscriptionOptions,\n  ExtraSubscriptionOptions,\n  SubscriptionResult,\n  R,\n} from './types';\n\n@Injectable()\nexport class Subscription<T = any, V = R> {\n  public readonly document: DocumentNode;\n  public client = 'default';\n\n  constructor(protected apollo: Apollo) {}\n\n  public subscribe(\n    variables?: V,\n    options?: SubscriptionOptions<V>,\n    extra?: ExtraSubscriptionOptions,\n  ): Observable<SubscriptionResult<T>> {\n    return this.apollo.use(this.client).subscribe<T, V>(\n      {\n        ...options,\n        variables,\n        query: this.document,\n      },\n      extra,\n    );\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'select',\n})\nexport class SelectPipe implements PipeTransform {\n  public transform(obj: any, name: string = '') {\n    if (name !== '') {\n      return obj && obj.data && obj.data[name];\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\n\nimport {Apollo} from './Apollo';\nimport {SelectPipe} from './SelectPipe';\n\nexport const PROVIDERS = [Apollo];\nexport const DECLARATIONS = [SelectPipe];\n\n@NgModule({\n  providers: PROVIDERS,\n  declarations: DECLARATIONS,\n  exports: DECLARATIONS,\n})\nexport class ApolloModule {}\n"],"names":[],"mappings":";;;;;;;;;AAGA;;;;;AAUA,SAAgB,WAAW,CAAI,SAA2B;IACxD,OAAO,IAAI,UAAU,CAAI,UAAU;QACjC,SAAS,EAAE,CAAC,IAAI,CACd,MAAM;YACJ,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACtB,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACxB,UAAU,CAAC,QAAQ,EAAE,CAAC;aACvB;SACF,EACD,KAAK;YACH,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACtB,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACzB;SACF,CACF,CAAC;QAEF,OAAO,MAAM,UAAU,CAAC,WAAW,EAAE,CAAC;KACvC,CAAC,CAAC;CACJ;AAED,MAAa,aAAa;;;;IACxB,YAAoB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAEzB,QAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;KAFjB;;;;;;;;IAI7B,QAAQ,CACb,IAAmD,EACnD,QAAgB,CAAC,EACjB,KAAS;QAET,0BAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MACnB,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAC5C,GAAiB;KACnB;CACF;;;;;;;;;AAKD,SAAgB,aAAa,CAC3B,GAA6C;IAE7C,oBAAC,GAAG,IAAS,UAAU,CAAC,GAAG,MAAM,GAAG,CAAC;IACrC,OAAO,GAAG,CAAC;CACZ;;;;;;;AAED,SAAgB,YAAY,CAC1B,GAAkB,EAClB,MAAc;IAEd,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;CACvD;;;;;;ACrDD;;;AAKA,MAAa,QAAQ;;;;;IAInB,YAAoB,QAA+B,EAAE,MAAc;QAA/C,aAAQ,GAAR,QAAQ,CAAuB;QACjD,IAAI,CAAC,YAAY,GAAG,YAAY,CAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAClC,MAAM,CACP,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;KACtC;;;;;IAIM,MAAM;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;KAC/B;;;;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;KACtC;;;;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;KACtC;;;;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;KACrC;;;;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;KACzC;;;;;IAEM,OAAO,CAAC,SAAa;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KACzC;;;;;;IAEM,SAAS,CACd,gBAAsE;QAEtE,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;KAClD;;;;;;IAEM,eAAe,CACpB,OAAuC;;;QAIvC,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,oBAAC,OAAO,GAAQ,CAAC;KACtD;;;;;IACM,WAAW,CAChB,KAAoE;QAEpE,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KACzC;;;;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;KACpC;;;;;IAEM,YAAY,CAAC,YAAoB;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;KACjD;;;;;IAEM,UAAU,CAAC,IAAS;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACvC;;;;;;;IAEM,YAAY,CACjB,SAAY,EACZ,WAAoB,KAAK,EACzB,YAAY,GAAG,IAAI;QAEnB,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;KACtE;CACF;;;;;;AC5FD;AAGA,MAAa,cAAc,GAAG,IAAI,cAAc,CAC9C,0BAA0B,CAC3B;;;;;;ACLD;;;AAmBA,MAAa,UAAU;;;;;IACrB,YACU,MAAc,EACd,OAAmC;QADnC,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAA4B;KACzC;;;;;;IAEG,UAAU,CAAW,OAA6B;QACvD,OAAO,IAAI,QAAQ,oBACjB,IAAI,CAAC,MAAM,CAAC,UAAU,mBAAW,OAAO,EAAE,IAC1C,IAAI,CAAC,MAAM,CACZ,CAAC;KACH;;;;;;IAEM,KAAK,CACV,OAAwB;QAExB,OAAO,WAAW,CAAuB,MACvC,IAAI,CAAC,MAAM,CAAC,KAAK,mBAAW,OAAO,EAAE,CACtC,CAAC;KACH;;;;;;IAEM,MAAM,CACX,OAA8B;QAE9B,OAAO,WAAW,CAAiB,MACjC,IAAI,CAAC,MAAM,CAAC,MAAM,mBAAW,OAAO,EAAE,CACvC,CAAC;KACH;;;;;;;IAEM,SAAS,CACd,OAA+B,EAC/B,KAAgC;;cAE1B,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,mBAAW,OAAO,EAAE,CAAC,CAAC;QAE1E,OAAO,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,IAAI;cAClC,GAAG;cACH,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACpC;;;;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;;;;IAEM,SAAS,CAAC,MAAiC;QAChD,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACpD;QAED,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;KACvB;;;;IAED,IAAY,MAAM;QAChB,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;;;IAEO,UAAU;QAChB,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;;;;IAEO,aAAa;QACnB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACpD;KACF;CACF;MAGY,MAAO,SAAQ,UAAe;;;;;IAMzC,YACU,OAAe,EAGvB,aAAwC;QAExC,KAAK,CAAC,OAAO,CAAC,CAAC;QALP,YAAO,GAAP,OAAO,CAAQ;QANjB,QAAG,GAAiC,IAAI,GAAG,EAGhD,CAAC;QAUF,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;SACnC;KACF;;;;;;;IAEM,MAAM,CACX,OAAyC,EACzC,IAAa;QAEb,IAAI,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YAC9B,IAAI,CAAC,WAAW,CAAc,IAAI,EAAE,OAAO,CAAC,CAAC;SAC9C;aAAM;YACL,IAAI,CAAC,aAAa,CAAc,OAAO,CAAC,CAAC;SAC1C;KACF;;;;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC;KACb;;;;;IAEM,GAAG,CAAC,IAAY;QACrB,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;SACvB;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAC3B;;;;;;IAEM,aAAa,CAClB,OAAyC;QAEzC,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACrD;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,YAAY,CAAc,OAAO,CAAC,CAAC,CAAC;KAC/D;;;;;;;IAEM,WAAW,CAChB,IAAY,EACZ,OAAyC;QAEzC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,UAAU,IAAI,2BAA2B,CAAC,CAAC;SAC5D;QACD,IAAI,CAAC,GAAG,CAAC,GAAG,CACV,IAAI,EACJ,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,YAAY,CAAc,OAAO,CAAC,CAAC,CACrE,CAAC;KACH;;;YA/DF,UAAU;;;;YAxF2B,MAAM;4CAiGvC,QAAQ,YACR,MAAM,SAAC,cAAc;;;;;;;AClG1B;;;AAUA,MAAa,KAAK;;;;IAIhB,YAAsB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAF7B,WAAM,GAAG,SAAS,CAAC;KAEc;;;;;;IAEjC,KAAK,CAAC,SAAa,EAAE,OAA8B;QACxD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,UAAU,mBACzC,OAAO,IACV,SAAS,EACT,KAAK,EAAE,IAAI,CAAC,QAAQ,IACpB,CAAC;KACJ;;;;;;IAEM,KAAK,CACV,SAAa,EACb,OAAyB;QAEzB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,mBACpC,OAAO,IACV,SAAS,EACT,KAAK,EAAE,IAAI,CAAC,QAAQ,IACpB,CAAC;KACJ;;;YAxBF,UAAU;;;;YAJH,MAAM;;;;;;;ACLd;;;AASA,MAAa,QAAQ;;;;IAInB,YAAsB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAF7B,WAAM,GAAG,SAAS,CAAC;KAEc;;;;;;IAEjC,MAAM,CACX,SAAa,EACb,OAA+B;QAE/B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,mBACrC,OAAO,IACV,SAAS,EACT,QAAQ,EAAE,IAAI,CAAC,QAAQ,IACvB,CAAC;KACJ;;;YAhBF,UAAU;;;;YAHH,MAAM;;;;;;;ACLd;;;AAaA,MAAa,YAAY;;;;IAIvB,YAAsB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAF7B,WAAM,GAAG,SAAS,CAAC;KAEc;;;;;;;IAEjC,SAAS,CACd,SAAa,EACb,OAAgC,EAChC,KAAgC;QAEhC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,mBAEtC,OAAO,IACV,SAAS,EACT,KAAK,EAAE,IAAI,CAAC,QAAQ,KAEtB,KAAK,CACN,CAAC;KACH;;;YApBF,UAAU;;;;YARH,MAAM;;;;;;;ACJd,MAKa,UAAU;;;;;;IACd,SAAS,CAAC,GAAQ,EAAE,OAAe,EAAE;QAC1C,IAAI,IAAI,KAAK,EAAE,EAAE;YACf,OAAO,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1C;KACF;;;YARF,IAAI,SAAC;gBACJ,IAAI,EAAE,QAAQ;aACf;;;;;;;ACJD;AAKA,MAAa,SAAS,GAAG,CAAC,MAAM,CAAC;;AACjC,MAAa,YAAY,GAAG,CAAC,UAAU,CAAC;AAOxC,MAAa,YAAY;;;YALxB,QAAQ,SAAC;gBACR,SAAS,EAAE,SAAS;gBACpB,YAAY,EAAE,YAAY;gBAC1B,OAAO,EAAE,YAAY;aACtB;;;;;;;;;;;;;;;"}
