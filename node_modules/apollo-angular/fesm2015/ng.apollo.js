import { observeOn } from 'rxjs/operators';
import { Observable, queueScheduler, observable, from } from 'rxjs';
import { InjectionToken, Injectable, Optional, Inject, NgZone, Pipe, NgModule } from '@angular/core';
import { ApolloClient } from 'apollo-client';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} promiseFn
 * @return {?}
 */
function fromPromise(promiseFn) {
    return new Observable(subscriber => {
        promiseFn().then(result => {
            if (!subscriber.closed) {
                subscriber.next(result);
                subscriber.complete();
            }
        }, error => {
            if (!subscriber.closed) {
                subscriber.error(error);
            }
        });
        return () => subscriber.unsubscribe();
    });
}
class ZoneScheduler {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        this.now = Date.now ? Date.now : () => +new Date();
    }
    /**
     * @template T
     * @param {?} work
     * @param {?=} delay
     * @param {?=} state
     * @return {?}
     */
    schedule(work, delay = 0, state) {
        return (/** @type {?} */ (this.zone.run(() => queueScheduler.schedule(work, delay, state))));
    }
}
// XXX: Apollo's QueryObservable is not compatible with RxJS
// TODO: remove it in one of future releases
// https://github.com/ReactiveX/rxjs/blob/9fb0ce9e09c865920cf37915cc675e3b3a75050b/src/internal/util/subscribeTo.ts#L32
/**
 * @template T
 * @param {?} obs
 * @return {?}
 */
function fixObservable(obs) {
    ((/** @type {?} */ (obs)))[observable] = () => obs;
    return obs;
}
/**
 * @template T
 * @param {?} obs
 * @param {?} ngZone
 * @return {?}
 */
function wrapWithZone(obs, ngZone) {
    return obs.pipe(observeOn(new ZoneScheduler(ngZone)));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T, V
 */
class QueryRef {
    /**
     * @param {?} obsQuery
     * @param {?} ngZone
     */
    constructor(obsQuery, ngZone) {
        this.obsQuery = obsQuery;
        this.valueChanges = wrapWithZone(from(fixObservable(this.obsQuery)), ngZone);
        this.queryId = this.obsQuery.queryId;
    }
    // ObservableQuery's methods
    /**
     * @return {?}
     */
    result() {
        return this.obsQuery.result();
    }
    /**
     * @return {?}
     */
    currentResult() {
        return this.obsQuery.currentResult();
    }
    /**
     * @return {?}
     */
    getLastResult() {
        return this.obsQuery.getLastResult();
    }
    /**
     * @return {?}
     */
    getLastError() {
        return this.obsQuery.getLastError();
    }
    /**
     * @return {?}
     */
    resetLastResults() {
        return this.obsQuery.resetLastResults();
    }
    /**
     * @param {?=} variables
     * @return {?}
     */
    refetch(variables) {
        return this.obsQuery.refetch(variables);
    }
    /**
     * @template K
     * @param {?} fetchMoreOptions
     * @return {?}
     */
    fetchMore(fetchMoreOptions) {
        return this.obsQuery.fetchMore(fetchMoreOptions);
    }
    /**
     * @template MT, MV
     * @param {?} options
     * @return {?}
     */
    subscribeToMore(options) {
        // XXX: there's a bug in apollo-client typings
        // it should not inherit types from ObservableQuery
        return this.obsQuery.subscribeToMore((/** @type {?} */ (options)));
    }
    /**
     * @param {?} mapFn
     * @return {?}
     */
    updateQuery(mapFn) {
        return this.obsQuery.updateQuery(mapFn);
    }
    /**
     * @return {?}
     */
    stopPolling() {
        return this.obsQuery.stopPolling();
    }
    /**
     * @param {?} pollInterval
     * @return {?}
     */
    startPolling(pollInterval) {
        return this.obsQuery.startPolling(pollInterval);
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    setOptions(opts) {
        return this.obsQuery.setOptions(opts);
    }
    /**
     * @param {?} variables
     * @param {?=} tryFetch
     * @param {?=} fetchResults
     * @return {?}
     */
    setVariables(variables, tryFetch = false, fetchResults = true) {
        return this.obsQuery.setVariables(variables, tryFetch, fetchResults);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const APOLLO_OPTIONS = new InjectionToken('[apollo-angular] options');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template TCacheShape
 */
class ApolloBase {
    /**
     * @param {?} ngZone
     * @param {?=} _client
     */
    constructor(ngZone, _client) {
        this.ngZone = ngZone;
        this._client = _client;
    }
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    watchQuery(options) {
        return new QueryRef((/** @type {?} */ (this.client.watchQuery(Object.assign({}, options)))), this.ngZone);
    }
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    query(options) {
        return fromPromise(() => this.client.query(Object.assign({}, options)));
    }
    /**
     * @template T, V
     * @param {?} options
     * @return {?}
     */
    mutate(options) {
        return fromPromise(() => this.client.mutate(Object.assign({}, options)));
    }
    /**
     * @template T, V
     * @param {?} options
     * @param {?=} extra
     * @return {?}
     */
    subscribe(options, extra) {
        /** @type {?} */
        const obs = from(fixObservable(this.client.subscribe(Object.assign({}, options))));
        return extra && extra.useZone !== true
            ? obs
            : wrapWithZone(obs, this.ngZone);
    }
    /**
     * @return {?}
     */
    getClient() {
        return this._client;
    }
    /**
     * @param {?} client
     * @return {?}
     */
    setClient(client) {
        if (this._client) {
            throw new Error('Client has been already defined');
        }
        this._client = client;
    }
    /**
     * @return {?}
     */
    get client() {
        this.beforeEach();
        return this._client;
    }
    /**
     * @return {?}
     */
    beforeEach() {
        this.checkInstance();
    }
    /**
     * @return {?}
     */
    checkInstance() {
        if (!this._client) {
            throw new Error('Client has not been defined yet');
        }
    }
}
class Apollo extends ApolloBase {
    /**
     * @param {?} _ngZone
     * @param {?=} apolloOptions
     */
    constructor(_ngZone, apolloOptions) {
        super(_ngZone);
        this._ngZone = _ngZone;
        this.map = new Map();
        if (apolloOptions) {
            this.createDefault(apolloOptions);
        }
    }
    /**
     * @template TCacheShape
     * @param {?} options
     * @param {?=} name
     * @return {?}
     */
    create(options, name) {
        if (name && name !== 'default') {
            this.createNamed(name, options);
        }
        else {
            this.createDefault(options);
        }
    }
    /**
     * @return {?}
     */
    default() {
        return this;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    use(name) {
        if (name === 'default') {
            return this.default();
        }
        return this.map.get(name);
    }
    /**
     * @template TCacheShape
     * @param {?} options
     * @return {?}
     */
    createDefault(options) {
        if (this.getClient()) {
            throw new Error('Apollo has been already created.');
        }
        return this.setClient(new ApolloClient(options));
    }
    /**
     * @template TCacheShape
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    createNamed(name, options) {
        if (this.map.has(name)) {
            throw new Error(`Client ${name} has been already created`);
        }
        this.map.set(name, new ApolloBase(this._ngZone, new ApolloClient(options)));
    }
}
Apollo.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Apollo.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_OPTIONS,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T, V
 */
class Query {
    /**
     * @param {?} apollo
     */
    constructor(apollo) {
        this.apollo = apollo;
        this.client = 'default';
    }
    /**
     * @param {?=} variables
     * @param {?=} options
     * @return {?}
     */
    watch(variables, options) {
        return this.apollo.use(this.client).watchQuery(Object.assign({}, options, { variables, query: this.document }));
    }
    /**
     * @param {?=} variables
     * @param {?=} options
     * @return {?}
     */
    fetch(variables, options) {
        return this.apollo.use(this.client).query(Object.assign({}, options, { variables, query: this.document }));
    }
}
Query.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Query.ctorParameters = () => [
    { type: Apollo }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T, V
 */
class Mutation {
    /**
     * @param {?} apollo
     */
    constructor(apollo) {
        this.apollo = apollo;
        this.client = 'default';
    }
    /**
     * @param {?=} variables
     * @param {?=} options
     * @return {?}
     */
    mutate(variables, options) {
        return this.apollo.use(this.client).mutate(Object.assign({}, options, { variables, mutation: this.document }));
    }
}
Mutation.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Mutation.ctorParameters = () => [
    { type: Apollo }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T, V
 */
class Subscription {
    /**
     * @param {?} apollo
     */
    constructor(apollo) {
        this.apollo = apollo;
        this.client = 'default';
    }
    /**
     * @param {?=} variables
     * @param {?=} options
     * @param {?=} extra
     * @return {?}
     */
    subscribe(variables, options, extra) {
        return this.apollo.use(this.client).subscribe(Object.assign({}, options, { variables, query: this.document }), extra);
    }
}
Subscription.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Subscription.ctorParameters = () => [
    { type: Apollo }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SelectPipe {
    /**
     * @param {?} obj
     * @param {?=} name
     * @return {?}
     */
    transform(obj, name = '') {
        if (name !== '') {
            return obj && obj.data && obj.data[name];
        }
    }
}
SelectPipe.decorators = [
    { type: Pipe, args: [{
                name: 'select',
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const PROVIDERS = [Apollo];
/** @type {?} */
const DECLARATIONS = [SelectPipe];
class ApolloModule {
}
ApolloModule.decorators = [
    { type: NgModule, args: [{
                providers: PROVIDERS,
                declarations: DECLARATIONS,
                exports: DECLARATIONS,
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { Apollo, ApolloBase, QueryRef, Query, Mutation, Subscription, SelectPipe, ApolloModule, APOLLO_OPTIONS, DECLARATIONS as ɵb, PROVIDERS as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,