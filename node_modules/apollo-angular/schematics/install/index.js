"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const semver_1 = require("semver");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
const node_1 = require("@angular-devkit/core/node");
const core_1 = require("@angular-devkit/core");
const utils_1 = require("../utils");
const ast_1 = require("../utils/ast");
function install(options) {
    return schematics_1.chain([
        assertTypescriptVersion(),
        addDependencies(),
        inludeAsyncIterableLib,
        addSetupFiles(options),
        importSetupModule(options),
        importHttpClientModule(options),
    ]);
}
exports.default = install;
exports.dependenciesMap = {
    'apollo-angular': '^1.5.0-rc.0',
    'apollo-angular-link-http': '^1.3.1',
    'apollo-link': '^1.2.0',
    'apollo-client': '^2.4.0',
    'apollo-cache-inmemory': '^1.3.2',
    'graphql-tag': '^2.10.0',
    graphql: '^0.13.2',
};
function assertTypescriptVersion() {
    return (host) => {
        const allowed = '>=2.8.0';
        let tsVersion;
        try {
            const resolveOptions = {
                basedir: host.root.path,
                checkGlobal: false,
                checkLocal: true,
            };
            tsVersion = require(node_1.resolve('typescript', resolveOptions)).version;
        }
        catch (_a) {
            console.error(core_1.terminal.bold(core_1.terminal.red(core_1.tags.stripIndents `
        Versions of typescript could not be determined.
        The most common reason for this is a broken npm install.
        Please make sure your package.json contains typescript in
        devDependencies, then delete node_modules and package-lock.json (if you have one) and
        run npm install again.
      `)));
            process.exit(2);
            return;
        }
        if (!semver_1.satisfies(tsVersion, allowed)) {
            // First line of warning looks weird being split in two, disable tslint for it.
            console.error(core_1.terminal.yellow('\n' +
                core_1.tags.stripIndent `
        typescript@'${allowed}' is required but ${tsVersion} was found instead.
        Using this version can result in undefined behaviour and difficult to debug problems.
        Please run the following command to install a compatible version of TypeScript.
            npm install typescript@'${allowed}'
      ` +
                '\n'));
        }
        return host;
    };
}
/**
 * Add all necessary node packages
 * as dependencies in the package.json
 * and installs them by running `npm install`.
 */
function addDependencies() {
    return (host, context) => {
        const packageJsonPath = 'package.json';
        const packageJson = utils_1.getJsonFile(host, packageJsonPath);
        packageJson.dependencies = packageJson.dependencies || {};
        for (const dependency in exports.dependenciesMap) {
            if (exports.dependenciesMap.hasOwnProperty(dependency)) {
                const version = exports.dependenciesMap[dependency];
                if (!packageJson.dependencies[dependency]) {
                    packageJson.dependencies[dependency] = version;
                }
            }
        }
        // save the changed file
        host.overwrite(packageJsonPath, JSON.stringify(packageJson, null, 2));
        // schedule `npm install`
        context.addTask(new tasks_1.NodePackageInstallTask());
        return host;
    };
}
function inludeAsyncIterableLib() {
    return (host) => {
        const requiredLib = 'esnext.asynciterable';
        const tsconfigPath = 'tsconfig.json';
        const tsconfig = utils_1.getJsonFile(host, tsconfigPath);
        const compilerOptions = tsconfig.compilerOptions;
        if (compilerOptions &&
            compilerOptions.lib &&
            !compilerOptions.lib.find(lib => lib.toLowerCase() === requiredLib)) {
            compilerOptions.lib.push(requiredLib);
            host.overwrite(tsconfigPath, JSON.stringify(tsconfig, null, 2));
        }
        else {
            console.error(core_1.terminal.yellow('\n' +
                core_1.tags.stripIndent `
              We couln't find '${requiredLib}' in the list of library files to be included in the compilation.
              It's required by 'apollo-client' package so please add it to your tsconfig.
            ` +
                '\n'));
        }
        return host;
    };
}
function addSetupFiles(options) {
    return (host) => {
        const mainPath = utils_1.getMainPath(host, options.project);
        const appModulePath = ng_ast_utils_1.getAppModulePath(host, mainPath);
        const appModuleDirectory = path_1.dirname(appModulePath);
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template({}),
            schematics_1.move(appModuleDirectory),
        ]);
        return schematics_1.mergeWith(templateSource);
    };
}
function importSetupModule(options) {
    return (host) => {
        ast_1.addModuleImportToRootModule(host, 'GraphQLModule', './graphql.module', options.project);
        return host;
    };
}
function importHttpClientModule(options) {
    return (host) => {
        ast_1.addModuleImportToRootModule(host, 'HttpClientModule', '@angular/common/http', options.project);
    };
}
//# sourceMappingURL=index.js.map