{"version":3,"sources":["ng://apollo-angular/testing/controller.ts","ng://apollo-angular/testing/operation.ts","ng://apollo-angular/testing/backend.ts","ng://apollo-angular/testing/module.ts"],"names":["ApolloTestingController","TestOperation","operation","observer","this","prototype","flush","result","err","hasOwnProperty","error","next","complete","networkError","apolloError","ApolloError","graphqlErrors","errors","ApolloTestingBackend","open","handle","op","_this","LinkObservable","testOp","push","_match","match","filter","operationName","isDocumentNode","print","query","matchOp","variables","JSON","stringify","extensions","sameName","compare","sameVariables","sameQuery","sameExtensions","expected","value","val","received","results","forEach","index","indexOf","splice","expectOne","description","descriptionFromMatcher","matches","length","Error","expectNone","verify","operations","map","join","docOrOp","matcher","name","Injectable","APOLLO_TESTING_CACHE","InjectionToken","ApolloTestingModule","apollo","backend","cache","create","link","ApolloLink","InMemoryCache","addTypename","NgModule","args","imports","ApolloModule","providers","provide","useExisting","Apollo","ApolloCache","decorators","type","Optional","Inject"],"mappings":"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","sourcesContent":["import {Operation} from 'apollo-link';\nimport {DocumentNode} from 'graphql';\n\nimport {TestOperation} from './operation';\n\nexport type MatchOperationFn = (op: Operation) => boolean;\nexport type MatchOperation =\n  | string\n  | DocumentNode\n  | Operation\n  | MatchOperationFn;\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of operations.\n *\n *\n */\nexport abstract class ApolloTestingController {\n  /**\n   * Search for operations that match the given parameter, without any expectations.\n   */\n  public abstract match(match: MatchOperation): TestOperation[];\n\n  /**\n   * Expect that a single  has been made which matches the given URL, and return its\n   * mock.\n   *\n   * If no such  has been made, or more than one such  has been made, fail with an\n   * error message including the given  description, if any.\n   */\n  public abstract expectOne(\n    operationName: string,\n    description?: string,\n  ): TestOperation;\n\n  /**\n   * Expect that a single  has been made which matches the given parameters, and return\n   * its mock.\n   *\n   * If no such  has been made, or more than one such  has been made, fail with an\n   * error message including the given  description, if any.\n   */\n  public abstract expectOne(op: Operation, description?: string): TestOperation;\n\n  /**\n   * Expect that a single  has been made which matches the given predicate function, and\n   * return its mock.\n   *\n   * If no such  has been made, or more than one such  has been made, fail with an\n   * error message including the given  description, if any.\n   */\n  public abstract expectOne(\n    matchFn: MatchOperationFn,\n    description?: string,\n  ): TestOperation;\n\n  /**\n   * Expect that a single  has been made which matches the given condition, and return\n   * its mock.\n   *\n   * If no such  has been made, or more than one such  has been made, fail with an\n   * error message including the given  description, if any.\n   */\n  public abstract expectOne(\n    match: MatchOperation,\n    description?: string,\n  ): TestOperation;\n\n  /**\n   * Expect that no operations have been made which match the given URL.\n   *\n   * If a matching  has been made, fail with an error message including the given\n   * description, if any.\n   */\n  public abstract expectNone(operationName: string, description?: string): void;\n\n  /**\n   * Expect that no operations have been made which match the given parameters.\n   *\n   * If a matching  has been made, fail with an error message including the given\n   * description, if any.\n   */\n  public abstract expectNone(op: Operation, description?: string): void;\n\n  /**\n   * Expect that no operations have been made which match the given predicate function.\n   *\n   * If a matching  has been made, fail with an error message including the given\n   * description, if any.\n   */\n  public abstract expectNone(\n    matchFn: MatchOperationFn,\n    description?: string,\n  ): void;\n\n  /**\n   * Expect that no operations have been made which match the given condition.\n   *\n   * If a matching  has been made, fail with an error message including the given\n   * description, if any.\n   */\n  public abstract expectNone(match: MatchOperation, description?: string): void;\n\n  /**\n   * Verify that no unmatched operations are outstanding.\n   *\n   * If any operations are outstanding, fail with an error message indicating which operations were not\n   * handled.\n   */\n  public abstract verify(): void;\n}\n","import {ApolloError} from 'apollo-client';\nimport {Operation, FetchResult} from 'apollo-link';\nimport {GraphQLError, ExecutionResult} from 'graphql';\nimport {Observer} from 'rxjs';\n\nconst isApolloError = (err: any): err is ApolloError =>\n  err && err.hasOwnProperty('graphQLErrors');\n\nexport class TestOperation {\n  constructor(\n    public operation: Operation,\n    private observer: Observer<FetchResult>,\n  ) {}\n\n  public flush(result: ExecutionResult | ApolloError): void {\n    if (isApolloError(result)) {\n      this.observer.error(result);\n    } else {\n      this.observer.next(result as FetchResult);\n      this.observer.complete();\n    }\n  }\n\n  public networkError(error: Error): void {\n    const apolloError = new ApolloError({\n      networkError: error,\n    });\n\n    this.flush(apolloError);\n  }\n\n  public graphqlErrors(errors: GraphQLError[]): void {\n    this.flush({\n      errors,\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Observer} from 'rxjs';\nimport {\n  Operation,\n  FetchResult,\n  Observable as LinkObservable,\n} from 'apollo-link';\nimport {DocumentNode} from 'graphql';\nimport {print} from 'graphql/language/printer';\n\nimport {ApolloTestingController, MatchOperation} from './controller';\nimport {TestOperation} from './operation';\n\n/**\n * A testing backend for `Apollo`.\n *\n * `ApolloTestingBackend` works by keeping a list of all open operations.\n * As operations come in, they're added to the list. Users can assert that specific\n * operations were made and then flush them. In the end, a verify() method asserts\n * that no unexpected operations were made.\n */\n@Injectable()\nexport class ApolloTestingBackend implements ApolloTestingController {\n  /**\n   * List of pending operations which have not yet been expected.\n   */\n  private open: TestOperation[] = [];\n\n  /**\n   * Handle an incoming operation by queueing it in the list of open operations.\n   */\n  public handle(op: Operation): LinkObservable<FetchResult> {\n    return new LinkObservable((observer: Observer<any>) => {\n      const testOp = new TestOperation(op, observer);\n      this.open.push(testOp);\n    });\n  }\n\n  /**\n   * Helper function to search for operations in the list of open operations.\n   */\n  private _match(match: MatchOperation): TestOperation[] {\n    if (typeof match === 'string') {\n      return this.open.filter(\n        testOp => testOp.operation.operationName === match,\n      );\n    } else if (typeof match === 'function') {\n      return this.open.filter(testOp => match(testOp.operation));\n    } else {\n      if (this.isDocumentNode(match)) {\n        return this.open.filter(\n          testOp => print(testOp.operation.query) === print(match),\n        );\n      }\n\n      return this.open.filter(testOp => this.matchOp(match, testOp));\n    }\n  }\n\n  private matchOp(match: Operation, testOp: TestOperation): boolean {\n    const variables = JSON.stringify(match.variables);\n    const extensions = JSON.stringify(match.extensions);\n\n    const sameName = this.compare(\n      match.operationName,\n      testOp.operation.operationName,\n    );\n    const sameVariables = this.compare(variables, testOp.operation.variables);\n\n    const sameQuery = print(testOp.operation.query) === print(match.query);\n\n    const sameExtensions = this.compare(\n      extensions,\n      testOp.operation.extensions,\n    );\n\n    return sameName && sameVariables && sameQuery && sameExtensions;\n  }\n\n  private compare(expected?: string, value?: Object | string): boolean {\n    const prepare = (val: any) =>\n      typeof val === 'string' ? val : JSON.stringify(val);\n    const received = prepare(value);\n\n    return !expected || received === expected;\n  }\n\n  /**\n   * Search for operations in the list of open operations, and return all that match\n   * without asserting anything about the number of matches.\n   */\n  public match(match: MatchOperation): TestOperation[] {\n    const results = this._match(match);\n\n    results.forEach(result => {\n      const index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * Expect that a single outstanding request matches the given matcher, and return\n   * it.\n   *\n   * operations returned through this API will no longer be in the list of open operations,\n   * and thus will not match twice.\n   */\n  public expectOne(match: MatchOperation, description?: string): TestOperation {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(\n        `Expected one matching operation for criteria \"${description}\", found ${\n          matches.length\n        } operations.`,\n      );\n    }\n    if (matches.length === 0) {\n      throw new Error(\n        `Expected one matching operation for criteria \"${description}\", found none.`,\n      );\n    }\n    return matches[0];\n  }\n\n  /**\n   * Expect that no outstanding operations match the given matcher, and throw an error\n   * if any do.\n   */\n  public expectNone(match: MatchOperation, description?: string): void {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(\n        `Expected zero matching operations for criteria \"${description}\", found ${\n          matches.length\n        }.`,\n      );\n    }\n  }\n\n  /**\n   * Validate that there are no outstanding operations.\n   */\n  public verify(): void {\n    const open = this.open;\n\n    if (open.length > 0) {\n      // Show the methods and URLs of open operations in the error, for convenience.\n      const operations = open\n        .map(testOp => testOp.operation.operationName)\n        .join(', ');\n      throw new Error(\n        `Expected no open operations, found ${open.length}: ${operations}`,\n      );\n    }\n  }\n\n  private isDocumentNode(\n    docOrOp: DocumentNode | Operation,\n  ): docOrOp is DocumentNode {\n    return !(docOrOp as Operation).operationName;\n  }\n\n  private descriptionFromMatcher(matcher: MatchOperation): string {\n    if (typeof matcher === 'string') {\n      return `Match operationName: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      if (this.isDocumentNode(matcher)) {\n        return `Match DocumentNode`;\n      }\n\n      const name = matcher.operationName || '(any)';\n      const variables = JSON.stringify(matcher.variables) || '(any)';\n\n      return `Match operation: ${name}, variables: ${variables}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\n}\n","import {ApolloModule, Apollo} from 'apollo-angular';\nimport {ApolloLink} from 'apollo-link';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {ApolloCache} from 'apollo-cache';\nimport {NgModule, InjectionToken, Inject, Optional} from '@angular/core';\n\nimport {ApolloTestingController} from './controller';\nimport {ApolloTestingBackend} from './backend';\n\nexport const APOLLO_TESTING_CACHE = new InjectionToken<ApolloCache<any>>(\n  'apollo-angular/testing cache',\n);\n\n@NgModule({\n  imports: [ApolloModule],\n  providers: [\n    ApolloTestingBackend,\n    {provide: ApolloTestingController, useExisting: ApolloTestingBackend},\n  ],\n})\nexport class ApolloTestingModule {\n  constructor(\n    apollo: Apollo,\n    backend: ApolloTestingBackend,\n    @Optional()\n    @Inject(APOLLO_TESTING_CACHE)\n    cache?: ApolloCache<any>,\n  ) {\n    apollo.create({\n      link: new ApolloLink(operation => backend.handle(operation)),\n      cache:\n        cache ||\n        new InMemoryCache({\n          addTypename: false,\n        }),\n    });\n  }\n}\n"]}