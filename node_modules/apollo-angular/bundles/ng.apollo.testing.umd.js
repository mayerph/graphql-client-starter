(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('apollo-client'), require('@angular/core'), require('apollo-link'), require('graphql/language/printer'), require('apollo-angular'), require('apollo-cache-inmemory'), require('apollo-cache')) :
    typeof define === 'function' && define.amd ? define('apollo-angular/testing', ['exports', 'apollo-client', '@angular/core', 'apollo-link', 'graphql/language/printer', 'apollo-angular', 'apollo-cache-inmemory', 'apollo-cache'], factory) :
    (factory((global['apollo-angular'] = global['apollo-angular'] || {}, global['apollo-angular'].testing = {}),global.apollo,global.ng.core,global.apolloLink.core,global.printer,global['apollo-angular'],global.apollo.cache.inmemory,global.apolloCache));
}(this, (function (exports,apolloClient,core,apolloLink,printer,apolloAngular,apolloCacheInmemory,apolloCache) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Controller to be injected into tests, that allows for mocking and flushing
     * of operations.
     *
     *
     * @abstract
     */
    var /**
     * Controller to be injected into tests, that allows for mocking and flushing
     * of operations.
     *
     *
     * @abstract
     */ ApolloTestingController = /** @class */ (function () {
        function ApolloTestingController() {
        }
        return ApolloTestingController;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var isApolloError = function (err) {
        return err && err.hasOwnProperty('graphQLErrors');
    };
    var TestOperation = /** @class */ (function () {
        function TestOperation(operation, observer) {
            this.operation = operation;
            this.observer = observer;
        }
        /**
         * @param {?} result
         * @return {?}
         */
        TestOperation.prototype.flush = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                if (isApolloError(result)) {
                    this.observer.error(result);
                }
                else {
                    this.observer.next(( /** @type {?} */(result)));
                    this.observer.complete();
                }
            };
        /**
         * @param {?} error
         * @return {?}
         */
        TestOperation.prototype.networkError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                /** @type {?} */
                var apolloError = new apolloClient.ApolloError({
                    networkError: error,
                });
                this.flush(apolloError);
            };
        /**
         * @param {?} errors
         * @return {?}
         */
        TestOperation.prototype.graphqlErrors = /**
         * @param {?} errors
         * @return {?}
         */
            function (errors) {
                this.flush({
                    errors: errors,
                });
            };
        return TestOperation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * A testing backend for `Apollo`.
     *
     * `ApolloTestingBackend` works by keeping a list of all open operations.
     * As operations come in, they're added to the list. Users can assert that specific
     * operations were made and then flush them. In the end, a verify() method asserts
     * that no unexpected operations were made.
     */
    var ApolloTestingBackend = /** @class */ (function () {
        function ApolloTestingBackend() {
            /**
             * List of pending operations which have not yet been expected.
             */
            this.open = [];
        }
        /**
         * Handle an incoming operation by queueing it in the list of open operations.
         */
        /**
         * Handle an incoming operation by queueing it in the list of open operations.
         * @param {?} op
         * @return {?}
         */
        ApolloTestingBackend.prototype.handle = /**
         * Handle an incoming operation by queueing it in the list of open operations.
         * @param {?} op
         * @return {?}
         */
            function (op) {
                var _this = this;
                return new apolloLink.Observable(function (observer) {
                    /** @type {?} */
                    var testOp = new TestOperation(op, observer);
                    _this.open.push(testOp);
                });
            };
        /**
         * Helper function to search for operations in the list of open operations.
         */
        /**
         * Helper function to search for operations in the list of open operations.
         * @param {?} match
         * @return {?}
         */
        ApolloTestingBackend.prototype._match = /**
         * Helper function to search for operations in the list of open operations.
         * @param {?} match
         * @return {?}
         */
            function (match) {
                var _this = this;
                if (typeof match === 'string') {
                    return this.open.filter(function (testOp) { return testOp.operation.operationName === match; });
                }
                else if (typeof match === 'function') {
                    return this.open.filter(function (testOp) { return match(testOp.operation); });
                }
                else {
                    if (this.isDocumentNode(match)) {
                        return this.open.filter(function (testOp) { return printer.print(testOp.operation.query) === printer.print(match); });
                    }
                    return this.open.filter(function (testOp) { return _this.matchOp(match, testOp); });
                }
            };
        /**
         * @param {?} match
         * @param {?} testOp
         * @return {?}
         */
        ApolloTestingBackend.prototype.matchOp = /**
         * @param {?} match
         * @param {?} testOp
         * @return {?}
         */
            function (match, testOp) {
                /** @type {?} */
                var variables = JSON.stringify(match.variables);
                /** @type {?} */
                var extensions = JSON.stringify(match.extensions);
                /** @type {?} */
                var sameName = this.compare(match.operationName, testOp.operation.operationName);
                /** @type {?} */
                var sameVariables = this.compare(variables, testOp.operation.variables);
                /** @type {?} */
                var sameQuery = printer.print(testOp.operation.query) === printer.print(match.query);
                /** @type {?} */
                var sameExtensions = this.compare(extensions, testOp.operation.extensions);
                return sameName && sameVariables && sameQuery && sameExtensions;
            };
        /**
         * @param {?=} expected
         * @param {?=} value
         * @return {?}
         */
        ApolloTestingBackend.prototype.compare = /**
         * @param {?=} expected
         * @param {?=} value
         * @return {?}
         */
            function (expected, value) {
                /** @type {?} */
                var prepare = function (val) {
                    return typeof val === 'string' ? val : JSON.stringify(val);
                };
                /** @type {?} */
                var received = prepare(value);
                return !expected || received === expected;
            };
        /**
         * Search for operations in the list of open operations, and return all that match
         * without asserting anything about the number of matches.
         */
        /**
         * Search for operations in the list of open operations, and return all that match
         * without asserting anything about the number of matches.
         * @param {?} match
         * @return {?}
         */
        ApolloTestingBackend.prototype.match = /**
         * Search for operations in the list of open operations, and return all that match
         * without asserting anything about the number of matches.
         * @param {?} match
         * @return {?}
         */
            function (match) {
                var _this = this;
                /** @type {?} */
                var results = this._match(match);
                results.forEach(function (result) {
                    /** @type {?} */
                    var index = _this.open.indexOf(result);
                    if (index !== -1) {
                        _this.open.splice(index, 1);
                    }
                });
                return results;
            };
        /**
         * Expect that a single outstanding request matches the given matcher, and return
         * it.
         *
         * operations returned through this API will no longer be in the list of open operations,
         * and thus will not match twice.
         */
        /**
         * Expect that a single outstanding request matches the given matcher, and return
         * it.
         *
         * operations returned through this API will no longer be in the list of open operations,
         * and thus will not match twice.
         * @param {?} match
         * @param {?=} description
         * @return {?}
         */
        ApolloTestingBackend.prototype.expectOne = /**
         * Expect that a single outstanding request matches the given matcher, and return
         * it.
         *
         * operations returned through this API will no longer be in the list of open operations,
         * and thus will not match twice.
         * @param {?} match
         * @param {?=} description
         * @return {?}
         */
            function (match, description) {
                description = description || this.descriptionFromMatcher(match);
                /** @type {?} */
                var matches = this.match(match);
                if (matches.length > 1) {
                    throw new Error("Expected one matching operation for criteria \"" + description + "\", found " + matches.length + " operations.");
                }
                if (matches.length === 0) {
                    throw new Error("Expected one matching operation for criteria \"" + description + "\", found none.");
                }
                return matches[0];
            };
        /**
         * Expect that no outstanding operations match the given matcher, and throw an error
         * if any do.
         */
        /**
         * Expect that no outstanding operations match the given matcher, and throw an error
         * if any do.
         * @param {?} match
         * @param {?=} description
         * @return {?}
         */
        ApolloTestingBackend.prototype.expectNone = /**
         * Expect that no outstanding operations match the given matcher, and throw an error
         * if any do.
         * @param {?} match
         * @param {?=} description
         * @return {?}
         */
            function (match, description) {
                description = description || this.descriptionFromMatcher(match);
                /** @type {?} */
                var matches = this.match(match);
                if (matches.length > 0) {
                    throw new Error("Expected zero matching operations for criteria \"" + description + "\", found " + matches.length + ".");
                }
            };
        /**
         * Validate that there are no outstanding operations.
         */
        /**
         * Validate that there are no outstanding operations.
         * @return {?}
         */
        ApolloTestingBackend.prototype.verify = /**
         * Validate that there are no outstanding operations.
         * @return {?}
         */
            function () {
                /** @type {?} */
                var open = this.open;
                if (open.length > 0) {
                    // Show the methods and URLs of open operations in the error, for convenience.
                    /** @type {?} */
                    var operations = open
                        .map(function (testOp) { return testOp.operation.operationName; })
                        .join(', ');
                    throw new Error("Expected no open operations, found " + open.length + ": " + operations);
                }
            };
        /**
         * @param {?} docOrOp
         * @return {?}
         */
        ApolloTestingBackend.prototype.isDocumentNode = /**
         * @param {?} docOrOp
         * @return {?}
         */
            function (docOrOp) {
                return !(( /** @type {?} */(docOrOp))).operationName;
            };
        /**
         * @param {?} matcher
         * @return {?}
         */
        ApolloTestingBackend.prototype.descriptionFromMatcher = /**
         * @param {?} matcher
         * @return {?}
         */
            function (matcher) {
                if (typeof matcher === 'string') {
                    return "Match operationName: " + matcher;
                }
                else if (typeof matcher === 'object') {
                    if (this.isDocumentNode(matcher)) {
                        return "Match DocumentNode";
                    }
                    /** @type {?} */
                    var name_1 = matcher.operationName || '(any)';
                    /** @type {?} */
                    var variables = JSON.stringify(matcher.variables) || '(any)';
                    return "Match operation: " + name_1 + ", variables: " + variables;
                }
                else {
                    return "Match by function: " + matcher.name;
                }
            };
        ApolloTestingBackend.decorators = [
            { type: core.Injectable }
        ];
        return ApolloTestingBackend;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var APOLLO_TESTING_CACHE = new core.InjectionToken('apollo-angular/testing cache');
    var ApolloTestingModule = /** @class */ (function () {
        function ApolloTestingModule(apollo, backend, cache) {
            apollo.create({
                link: new apolloLink.ApolloLink(function (operation) { return backend.handle(operation); }),
                cache: cache ||
                    new apolloCacheInmemory.InMemoryCache({
                        addTypename: false,
                    }),
            });
        }
        ApolloTestingModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [apolloAngular.ApolloModule],
                        providers: [
                            ApolloTestingBackend,
                            { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
                        ],
                    },] }
        ];
        /** @nocollapse */
        ApolloTestingModule.ctorParameters = function () {
            return [
                { type: apolloAngular.Apollo },
                { type: ApolloTestingBackend },
                { type: apolloCache.ApolloCache, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APOLLO_TESTING_CACHE,] }] }
            ];
        };
        return ApolloTestingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.ApolloTestingController = ApolloTestingController;
    exports.ApolloTestingModule = ApolloTestingModule;
    exports.APOLLO_TESTING_CACHE = APOLLO_TESTING_CACHE;
    exports.TestOperation = TestOperation;
    exports.ɵa = ApolloTestingBackend;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,