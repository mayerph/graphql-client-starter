(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('rxjs'), require('@angular/core'), require('apollo-client')) :
    typeof define === 'function' && define.amd ? define('apollo-angular', ['exports', 'rxjs/operators', 'rxjs', '@angular/core', 'apollo-client'], factory) :
    (factory((global['ng.apollo'] = {}),global.rxjs.operators,global.rxjs,global.ng.core,global.apollo));
}(this, (function (exports,operators,rxjs,core,apolloClient) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} promiseFn
     * @return {?}
     */
    function fromPromise(promiseFn) {
        return new rxjs.Observable(function (subscriber) {
            promiseFn().then(function (result) {
                if (!subscriber.closed) {
                    subscriber.next(result);
                    subscriber.complete();
                }
            }, function (error) {
                if (!subscriber.closed) {
                    subscriber.error(error);
                }
            });
            return function () { return subscriber.unsubscribe(); };
        });
    }
    var ZoneScheduler = /** @class */ (function () {
        function ZoneScheduler(zone) {
            this.zone = zone;
            this.now = Date.now ? Date.now : function () { return +new Date(); };
        }
        /**
         * @template T
         * @param {?} work
         * @param {?=} delay
         * @param {?=} state
         * @return {?}
         */
        ZoneScheduler.prototype.schedule = /**
         * @template T
         * @param {?} work
         * @param {?=} delay
         * @param {?=} state
         * @return {?}
         */
            function (work, delay, state) {
                if (delay === void 0) {
                    delay = 0;
                }
                return ( /** @type {?} */(this.zone.run(function () {
                    return rxjs.queueScheduler.schedule(work, delay, state);
                })));
            };
        return ZoneScheduler;
    }());
    // XXX: Apollo's QueryObservable is not compatible with RxJS
    // TODO: remove it in one of future releases
    // https://github.com/ReactiveX/rxjs/blob/9fb0ce9e09c865920cf37915cc675e3b3a75050b/src/internal/util/subscribeTo.ts#L32
    /**
     * @template T
     * @param {?} obs
     * @return {?}
     */
    function fixObservable(obs) {
        (( /** @type {?} */(obs)))[rxjs.observable] = function () { return obs; };
        return obs;
    }
    /**
     * @template T
     * @param {?} obs
     * @param {?} ngZone
     * @return {?}
     */
    function wrapWithZone(obs, ngZone) {
        return obs.pipe(operators.observeOn(new ZoneScheduler(ngZone)));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T, V
     */
    var /**
     * @template T, V
     */ QueryRef = /** @class */ (function () {
        function QueryRef(obsQuery, ngZone) {
            this.obsQuery = obsQuery;
            this.valueChanges = wrapWithZone(rxjs.from(fixObservable(this.obsQuery)), ngZone);
            this.queryId = this.obsQuery.queryId;
        }
        // ObservableQuery's methods
        // ObservableQuery's methods
        /**
         * @return {?}
         */
        QueryRef.prototype.result =
            // ObservableQuery's methods
            /**
             * @return {?}
             */
            function () {
                return this.obsQuery.result();
            };
        /**
         * @return {?}
         */
        QueryRef.prototype.currentResult = /**
         * @return {?}
         */
            function () {
                return this.obsQuery.currentResult();
            };
        /**
         * @return {?}
         */
        QueryRef.prototype.getLastResult = /**
         * @return {?}
         */
            function () {
                return this.obsQuery.getLastResult();
            };
        /**
         * @return {?}
         */
        QueryRef.prototype.getLastError = /**
         * @return {?}
         */
            function () {
                return this.obsQuery.getLastError();
            };
        /**
         * @return {?}
         */
        QueryRef.prototype.resetLastResults = /**
         * @return {?}
         */
            function () {
                return this.obsQuery.resetLastResults();
            };
        /**
         * @param {?=} variables
         * @return {?}
         */
        QueryRef.prototype.refetch = /**
         * @param {?=} variables
         * @return {?}
         */
            function (variables) {
                return this.obsQuery.refetch(variables);
            };
        /**
         * @template K
         * @param {?} fetchMoreOptions
         * @return {?}
         */
        QueryRef.prototype.fetchMore = /**
         * @template K
         * @param {?} fetchMoreOptions
         * @return {?}
         */
            function (fetchMoreOptions) {
                return this.obsQuery.fetchMore(fetchMoreOptions);
            };
        /**
         * @template MT, MV
         * @param {?} options
         * @return {?}
         */
        QueryRef.prototype.subscribeToMore = /**
         * @template MT, MV
         * @param {?} options
         * @return {?}
         */
            function (options) {
                // XXX: there's a bug in apollo-client typings
                // it should not inherit types from ObservableQuery
                return this.obsQuery.subscribeToMore(( /** @type {?} */(options)));
            };
        /**
         * @param {?} mapFn
         * @return {?}
         */
        QueryRef.prototype.updateQuery = /**
         * @param {?} mapFn
         * @return {?}
         */
            function (mapFn) {
                return this.obsQuery.updateQuery(mapFn);
            };
        /**
         * @return {?}
         */
        QueryRef.prototype.stopPolling = /**
         * @return {?}
         */
            function () {
                return this.obsQuery.stopPolling();
            };
        /**
         * @param {?} pollInterval
         * @return {?}
         */
        QueryRef.prototype.startPolling = /**
         * @param {?} pollInterval
         * @return {?}
         */
            function (pollInterval) {
                return this.obsQuery.startPolling(pollInterval);
            };
        /**
         * @param {?} opts
         * @return {?}
         */
        QueryRef.prototype.setOptions = /**
         * @param {?} opts
         * @return {?}
         */
            function (opts) {
                return this.obsQuery.setOptions(opts);
            };
        /**
         * @param {?} variables
         * @param {?=} tryFetch
         * @param {?=} fetchResults
         * @return {?}
         */
        QueryRef.prototype.setVariables = /**
         * @param {?} variables
         * @param {?=} tryFetch
         * @param {?=} fetchResults
         * @return {?}
         */
            function (variables, tryFetch, fetchResults) {
                if (tryFetch === void 0) {
                    tryFetch = false;
                }
                if (fetchResults === void 0) {
                    fetchResults = true;
                }
                return this.obsQuery.setVariables(variables, tryFetch, fetchResults);
            };
        return QueryRef;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var APOLLO_OPTIONS = new core.InjectionToken('[apollo-angular] options');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template TCacheShape
     */
    var /**
     * @template TCacheShape
     */ ApolloBase = /** @class */ (function () {
        function ApolloBase(ngZone, _client) {
            this.ngZone = ngZone;
            this._client = _client;
        }
        /**
         * @template T, V
         * @param {?} options
         * @return {?}
         */
        ApolloBase.prototype.watchQuery = /**
         * @template T, V
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return new QueryRef(( /** @type {?} */(this.client.watchQuery(__assign({}, options)))), this.ngZone);
            };
        /**
         * @template T, V
         * @param {?} options
         * @return {?}
         */
        ApolloBase.prototype.query = /**
         * @template T, V
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                return fromPromise(function () {
                    return _this.client.query(__assign({}, options));
                });
            };
        /**
         * @template T, V
         * @param {?} options
         * @return {?}
         */
        ApolloBase.prototype.mutate = /**
         * @template T, V
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                return fromPromise(function () {
                    return _this.client.mutate(__assign({}, options));
                });
            };
        /**
         * @template T, V
         * @param {?} options
         * @param {?=} extra
         * @return {?}
         */
        ApolloBase.prototype.subscribe = /**
         * @template T, V
         * @param {?} options
         * @param {?=} extra
         * @return {?}
         */
            function (options, extra) {
                /** @type {?} */
                var obs = rxjs.from(fixObservable(this.client.subscribe(__assign({}, options))));
                return extra && extra.useZone !== true
                    ? obs
                    : wrapWithZone(obs, this.ngZone);
            };
        /**
         * @return {?}
         */
        ApolloBase.prototype.getClient = /**
         * @return {?}
         */
            function () {
                return this._client;
            };
        /**
         * @param {?} client
         * @return {?}
         */
        ApolloBase.prototype.setClient = /**
         * @param {?} client
         * @return {?}
         */
            function (client) {
                if (this._client) {
                    throw new Error('Client has been already defined');
                }
                this._client = client;
            };
        Object.defineProperty(ApolloBase.prototype, "client", {
            get: /**
             * @return {?}
             */ function () {
                this.beforeEach();
                return this._client;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ApolloBase.prototype.beforeEach = /**
         * @return {?}
         */
            function () {
                this.checkInstance();
            };
        /**
         * @return {?}
         */
        ApolloBase.prototype.checkInstance = /**
         * @return {?}
         */
            function () {
                if (!this._client) {
                    throw new Error('Client has not been defined yet');
                }
            };
        return ApolloBase;
    }());
    var Apollo = /** @class */ (function (_super) {
        __extends(Apollo, _super);
        function Apollo(_ngZone, apolloOptions) {
            var _this = _super.call(this, _ngZone) || this;
            _this._ngZone = _ngZone;
            _this.map = new Map();
            if (apolloOptions) {
                _this.createDefault(apolloOptions);
            }
            return _this;
        }
        /**
         * @template TCacheShape
         * @param {?} options
         * @param {?=} name
         * @return {?}
         */
        Apollo.prototype.create = /**
         * @template TCacheShape
         * @param {?} options
         * @param {?=} name
         * @return {?}
         */
            function (options, name) {
                if (name && name !== 'default') {
                    this.createNamed(name, options);
                }
                else {
                    this.createDefault(options);
                }
            };
        /**
         * @return {?}
         */
        Apollo.prototype.default = /**
         * @return {?}
         */
            function () {
                return this;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        Apollo.prototype.use = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (name === 'default') {
                    return this.default();
                }
                return this.map.get(name);
            };
        /**
         * @template TCacheShape
         * @param {?} options
         * @return {?}
         */
        Apollo.prototype.createDefault = /**
         * @template TCacheShape
         * @param {?} options
         * @return {?}
         */
            function (options) {
                if (this.getClient()) {
                    throw new Error('Apollo has been already created.');
                }
                return this.setClient(new apolloClient.ApolloClient(options));
            };
        /**
         * @template TCacheShape
         * @param {?} name
         * @param {?} options
         * @return {?}
         */
        Apollo.prototype.createNamed = /**
         * @template TCacheShape
         * @param {?} name
         * @param {?} options
         * @return {?}
         */
            function (name, options) {
                if (this.map.has(name)) {
                    throw new Error("Client " + name + " has been already created");
                }
                this.map.set(name, new ApolloBase(this._ngZone, new apolloClient.ApolloClient(options)));
            };
        Apollo.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Apollo.ctorParameters = function () {
            return [
                { type: core.NgZone },
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APOLLO_OPTIONS,] }] }
            ];
        };
        return Apollo;
    }(ApolloBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T, V
     */
    var Query = /** @class */ (function () {
        function Query(apollo) {
            this.apollo = apollo;
            this.client = 'default';
        }
        /**
         * @param {?=} variables
         * @param {?=} options
         * @return {?}
         */
        Query.prototype.watch = /**
         * @param {?=} variables
         * @param {?=} options
         * @return {?}
         */
            function (variables, options) {
                return this.apollo.use(this.client).watchQuery(__assign({}, options, { variables: variables, query: this.document }));
            };
        /**
         * @param {?=} variables
         * @param {?=} options
         * @return {?}
         */
        Query.prototype.fetch = /**
         * @param {?=} variables
         * @param {?=} options
         * @return {?}
         */
            function (variables, options) {
                return this.apollo.use(this.client).query(__assign({}, options, { variables: variables, query: this.document }));
            };
        Query.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Query.ctorParameters = function () {
            return [
                { type: Apollo }
            ];
        };
        return Query;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T, V
     */
    var Mutation = /** @class */ (function () {
        function Mutation(apollo) {
            this.apollo = apollo;
            this.client = 'default';
        }
        /**
         * @param {?=} variables
         * @param {?=} options
         * @return {?}
         */
        Mutation.prototype.mutate = /**
         * @param {?=} variables
         * @param {?=} options
         * @return {?}
         */
            function (variables, options) {
                return this.apollo.use(this.client).mutate(__assign({}, options, { variables: variables, mutation: this.document }));
            };
        Mutation.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Mutation.ctorParameters = function () {
            return [
                { type: Apollo }
            ];
        };
        return Mutation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T, V
     */
    var Subscription = /** @class */ (function () {
        function Subscription(apollo) {
            this.apollo = apollo;
            this.client = 'default';
        }
        /**
         * @param {?=} variables
         * @param {?=} options
         * @param {?=} extra
         * @return {?}
         */
        Subscription.prototype.subscribe = /**
         * @param {?=} variables
         * @param {?=} options
         * @param {?=} extra
         * @return {?}
         */
            function (variables, options, extra) {
                return this.apollo.use(this.client).subscribe(__assign({}, options, { variables: variables, query: this.document }), extra);
            };
        Subscription.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Subscription.ctorParameters = function () {
            return [
                { type: Apollo }
            ];
        };
        return Subscription;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SelectPipe = /** @class */ (function () {
        function SelectPipe() {
        }
        /**
         * @param {?} obj
         * @param {?=} name
         * @return {?}
         */
        SelectPipe.prototype.transform = /**
         * @param {?} obj
         * @param {?=} name
         * @return {?}
         */
            function (obj, name) {
                if (name === void 0) {
                    name = '';
                }
                if (name !== '') {
                    return obj && obj.data && obj.data[name];
                }
            };
        SelectPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'select',
                    },] }
        ];
        return SelectPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PROVIDERS = [Apollo];
    /** @type {?} */
    var DECLARATIONS = [SelectPipe];
    var ApolloModule = /** @class */ (function () {
        function ApolloModule() {
        }
        ApolloModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: PROVIDERS,
                        declarations: DECLARATIONS,
                        exports: DECLARATIONS,
                    },] }
        ];
        return ApolloModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.Apollo = Apollo;
    exports.ApolloBase = ApolloBase;
    exports.QueryRef = QueryRef;
    exports.Query = Query;
    exports.Mutation = Mutation;
    exports.Subscription = Subscription;
    exports.SelectPipe = SelectPipe;
    exports.ApolloModule = ApolloModule;
    exports.APOLLO_OPTIONS = APOLLO_OPTIONS;
    exports.ɵb = DECLARATIONS;
    exports.ɵa = PROVIDERS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,